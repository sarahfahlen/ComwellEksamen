@page "/elevplan"
@inject ILoginService lService
@inject IBrugereService bService 
@inject IElevplanService eService
@inject NavigationManager navManager
@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using Shared
@using ElevplanModel = Shared.Elevplan
@using ComwellApp.Components
@using ComwellApp.Services.Elevplan
<PageTitle>Elevplan</PageTitle>

<div class="elevplan-layout">
<div class="main-indhold">
    <div class="elevplan-header">
        <h1>Min elevplan</h1>

        @if (minPlan?.ListPerioder != null)
        {
            <div class="periode-wrapper">
                <span class="periode-label">Se periode</span>
                <div class="periode-knapper">
                    @for (int i = 0; i < minPlan.ListPerioder.Count; i++)
                    {
                        <button class="periodeknap" @onclick="() => valgtPeriodeIndex = i">
                            @(i + 1)
                        </button>
                    }
                </div>
            </div>
        }
    </div>

        <div id="elevoplysning">
            <div id="elevdata">
                <div class="elevdata-grid">
                    <div class="elevdata-label"> <strong> Navn </strong></div>
                    <div class="elevdata-value">@loggedIn?.Navn</div>

                    <div class="elevdata-label"><strong> Elev siden </strong></div>
                    <div class="elevdata-value">@loggedIn?.StartDato</div>

                    <div class="elevdata-label"><strong> Ansvarlig køkkenchef </strong></div>
                    <div class="elevdata-value">@minPlan?.Ansvarlig?.Navn</div>

                    <div class="elevdata-label"><strong> Lokation for elevtid </strong></div>
                    <div class="elevdata-value">@loggedIn?.Koekken?.LokationNavn</div>
                </div>
            </div>
            <div id="elevbillede">
                @if (!string.IsNullOrEmpty(loggedIn?.Billede))
                {
                    <img src="@loggedIn.Billede" alt="Elevbillede" class="elevbillede-img" />
                }
            </div>
        </div>
    <div id="statusbar">
        @if (AntalDelmaalIAlt() > 0)
        {
            //Beregner procentsats for færdiggørrelsesgrad, og laver til en int
            double procent = (double)AntalDelmaalOpnaaet() / AntalDelmaalIAlt() * 100;
            int procentInt = (int)Math.Round(procent);
            //definerer de gradient farver vi vil have i vores statusbar
            string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

            //Udfylder hele baren, men "klipper" den del fra vi ikke har fuldført - altså den omvendte procentsats
            <div class="statusbar-outer">
                <div class="statusbar-inner" style="background:@gradient; clip-path: inset(0 calc(@(100 - procentInt)%) 0 0);"></div>
            </div>

            <p>@AntalDelmaalOpnaaet() / @AntalDelmaalIAlt() delmål opnået i den valgte praktikperiode</p>
        }
    </div>
    <div id="plan">
        @if (aktivPeriode != null)
        {
            @foreach (var maal in HentFiltreredeMaal())
            {
                <div class="maal-kort">
                    <h5>@maal.MaalNavn</h5>
                </div>

                <div class="delmaal-container">
                    @foreach (var delmaal in maal.ListDelmaal)
                    {
                        <div class="delmaal">
                            <h4 class="delmaal-overskrift">@delmaal.Beskrivelse</h4>
                            <p>Type: @delmaal.DelmaalType</p>
                            <p>Ansvarlig: @delmaal.Ansvarlig</p>
                            <p>
                                Deadline: @(delmaal.Deadline != null
                                              ? delmaal.Deadline?.ToString("dd/MM-yyyy")
                                              : delmaal.DeadlineKommentar)
                            </p>
                            <p> Kommentar:
                                <button class="kommentar-knap" @onclick="() => AabenKommentar(delmaal.DelmaalID)">
                                    Se kommentar
                                </button>
                            </p>

                            <div class="status-badge @(delmaal.Status ? "status-opnået" : "status-ikkeopnået")">
                                @(delmaal.Status ? "Gennemført" : "Ikke gennemført")
                            </div>
                        </div>
                    }
                </div>
                <br>
            }
        }
    </div>
    <ModalDialog @ref="kommentarDialog" Title="Kommentarer til delmål">
        <div class="modal-form">
            <!-- Elevens kommentar -->
            <label><strong>Elevens kommentar</strong></label>

            @{
                    Kommentar? elevK = null;
                    if (minPlan != null && aktivtDelmaalId != 0)
                    {
                        elevK = eService.GetKommentar(minPlan, aktivtDelmaalId, "Elev");
                    }
            }

            @if (elevK != null)
            {
                <p class="kommentar-info">
                    <strong>@elevK.OprettetAf?.Navn</strong>, @elevK.Dato.ToString("dd.MM.yyyy"):
                </p>
            }

            @if (loggedIn?.Rolle == "Elev")
            {
                <InputTextArea class="form-control kommentarbox" style="height:14rem;" @bind-Value="elevKommentar" />
            }
            else if (elevK != null)
            {
                <p>@elevK.Tekst</p>
            }
            else
            {
                <p><em>Ingen elevkommentar endnu.</em></p>
            }

            <!-- Kokkens kommentar -->
            <label class="mt-3"><strong>Kokkens kommentar</strong></label>

            @{
                    Kommentar? kokK = null;
                    if (minPlan != null && aktivtDelmaalId != 0)
                    {
                        kokK = eService.GetKommentar(minPlan, aktivtDelmaalId, "Køkkenchef");
                    }
            }

            @if (kokK != null)
            {
                <p class="kommentar-info">
                    <strong>@kokK.OprettetAf?.Navn</strong>, @kokK.Dato.ToString("dd.MM.yyyy"):
                </p>
            }

            @if (loggedIn?.Rolle == "Køkkenchef")
            {
                <InputTextArea class="form-control kommentarbox" style="height:14rem;" @bind-Value="kokKommentar" />
            }
            else if (kokK != null)
            {
                <p>@kokK.Tekst</p>
            }
            else
            {
                <p><em>Ingen kokkekommentar endnu.</em></p>
            }

            <button class="Gemkommentarknap" @onclick="GemKommentar">Gem kommentar</button>
        </div>
    </ModalDialog>



</div>
        <div class="sidepanel">
            <div class="sidepanel-værktøj">
                <label for="soeg">Søg delmål</label>
                <input type="text" id="soeg" class="soeg-input" placeholder="Skriv søgeord..."
                       @bind="søgeord" @bind:event="oninput" />
            </div>

            <div class="sidepanel-værktøj">
                <label for="filter">Filtrer efter mål</label>
                <button class="filter-knap" id="filter">Filtrer</button>
            </div>
        </div>
</div>



@code {
    //Gemmer den bruger som er logget ind
    private Bruger? loggedIn;
    //Gemmer planen for den bruger som er logget ind, ved at hente den i OnInitializedAsync
    private ElevplanModel? minPlan;
    //Sætter default visning til at være 0 (1 praktik), og gør det muligt at ændre visning til andre
    private int valgtPeriodeIndex = 0;
    private Praktikperiode? aktivPeriode => minPlan?.ListPerioder[valgtPeriodeIndex];
    //modaldialog til at lave kommentarer
    private ModalDialog? kommentarDialog;
    private string elevKommentar = "";
    private string kokKommentar = "";
    private int aktivtDelmaalId = 0;
    private int aktivtKommentarId = 0;
    private bool isEditMode = false;
    // Sætter default på søgeordet til søgning af mål og delmål
    private string søgeord = "";


    //Tjekker om brugeren er logget ind, og gemmer som et objekt loggedIn - og sætter planen til at være brugerens elevplan
    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/elevplan");
            return;
        }
        minPlan = loggedIn.MinElevplan;
        
        //Denne del kan vi bruge til manuelt at ændre status på antallet af delmål med status færdig, uden at have rediger funktion
        //Bruges til at teste statusbar og dens farver
        var alleDelmaal = minPlan?.ListPerioder
            .SelectMany(p => p.ListMaal)
            .SelectMany(m => m.ListDelmaal)
            .Take(14);

        if (alleDelmaal != null)
        {
            foreach (var d in alleDelmaal)
                d.Status = true;
        }
    }
    
    //Bruges til at beregne hvor mange delmål der er i den aktive periode (visningsperioden)
    private int AntalDelmaalIAlt()
    {
        if (aktivPeriode == null)
            return 0;

        int antal = 0;

        foreach (var mål in aktivPeriode.ListMaal)
        {
            antal += mål.ListDelmaal.Count;
        }

        return antal;
    }
    
    //Bruges til at beregne antal delmål som er opnået
    private int AntalDelmaalOpnaaet()
    {
        if (aktivPeriode == null)
            return 0;

        int opnaaet = 0;

        foreach (var mål in aktivPeriode.ListMaal)
        {
            foreach (var delmål in mål.ListDelmaal)
            {
                if (delmål.Status)
                    opnaaet++;
            }
        }

        return opnaaet;
    }
    
    private void AabenKommentar(int delmaalId)
    {
        aktivtDelmaalId = delmaalId;
        elevKommentar = "";
        kokKommentar = "";

        if (minPlan != null)
        {
            var elevK = eService.GetKommentar(minPlan, delmaalId, "Elev");
            var kokK = eService.GetKommentar(minPlan, delmaalId, "Køkkenchef");

            elevKommentar = elevK?.Tekst ?? "";
            kokKommentar = kokK?.Tekst ?? "";
            aktivtKommentarId = elevK?.KommentarId ?? kokK?.KommentarId ?? 0;
        }

        kommentarDialog?.Open();
    }


    
    private async Task GemKommentar()
    {
        if (minPlan == null || loggedIn == null)
            return;

        if (loggedIn.Rolle == "Elev")
        {
            var eksisterende = eService.GetKommentar(minPlan, aktivtDelmaalId, "Elev");

            if (eksisterende != null)
            {
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende.KommentarId, elevKommentar);
            }
            else if (!string.IsNullOrWhiteSpace(elevKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAf = loggedIn,
                    Tekst = elevKommentar
                };

                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }
        else if (loggedIn.Rolle == "Køkkenchef")
        {
            var eksisterende = eService.GetKommentar(minPlan, aktivtDelmaalId, "Køkkenchef");

            if (eksisterende != null)
            {
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende.KommentarId, kokKommentar);
            }
            else if (!string.IsNullOrWhiteSpace(kokKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAf = loggedIn,
                    Tekst = kokKommentar
                };

                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }

        kommentarDialog?.Close();
    }

    private List<Maal> HentFiltreredeMaal()
    {
        //Hvis der ikke er valgt en periode eller hvis søgefeltet er tomt, så viser vi alle mål som normalt
        if (aktivPeriode == null || string.IsNullOrWhiteSpace(søgeord))
            return aktivPeriode?.ListMaal ?? new();

        //Gemmer søgeordet i små bogstaver
        var søg = søgeord.ToLower();

        //Vi gennemgår alle mål i perioden, og for hvert mål og laver en ny kopi af målet, men kun med de delmål der matcher søgningen
        return aktivPeriode.ListMaal
            .Select(maal => new Maal
            {
                MaalId = maal.MaalId,
                MaalNavn = maal.MaalNavn,
                ListDelmaal = maal.ListDelmaal
                    .Where(dm => dm.Beskrivelse.ToLower().Contains(søg))
                    .ToList()
            })
            .Where(maal => maal.ListDelmaal.Any()) // kun mål med mindst ét match
            .ToList();
    }

    
}