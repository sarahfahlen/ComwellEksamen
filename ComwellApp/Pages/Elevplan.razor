@page "/elevplan"
@inject ILoginService lService
@inject IBrugereService bService 
@inject NavigationManager navManager
@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using Shared
@using ElevplanModel = Shared.Elevplan
<PageTitle>Elevplan</PageTitle>

<h3>Min elevplan</h3>
<div class="elevplan-layout">
    <div class="main-indhold">
        <div id="periodevisning">
            @if (minPlan?.ListPerioder != null)
            {
                <div>
                    Se periode
                    @for (int i = 0; i < minPlan.ListPerioder.Count; i++)
                    {
                        <button @onclick="() => valgtPeriodeIndex = i">
                            @(i + 1)
                        </button>
                    }
                </div>
            }
        </div>

        <div id="elevoplysning">
            <div id="elevdata">
                <p> @loggedIn?.Navn</p>
                <p> Elev siden: @loggedIn?.StartDato</p>
                <p> Køkkenchef: @minPlan?.Ansvarlig?.Navn</p>
                <p> Lokation: @loggedIn?.Koekken?.LokationNavn</p>
            </div>
            <div id="elevbillede">
                @if (!string.IsNullOrEmpty(loggedIn?.Billede))
                {
                    <img src="@loggedIn.Billede" alt="Elevbillede" class="elevbillede-img" />
                }
            </div>
        </div>
        <div id="statusbar">
            @if (AntalDelmaalIAlt() > 0)
            {
                //Beregner procentsats for færdiggørrelsesgrad, og laver til en int
                double procent = (double)AntalDelmaalOpnaaet() / AntalDelmaalIAlt() * 100;
                int procentInt = (int)Math.Round(procent);
                //definerer de gradient farver vi vil have i vores statusbar
                string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

                //Udfylder hele baren, men "klipper" den del fra vi ikke har fuldført - altså den omvendte procentsats
                <div class="statusbar-outer">
                    <div class="statusbar-inner" style="background:@gradient; clip-path: inset(0 calc(@(100 - procentInt)%) 0 0);"></div>
                    </div>

                <p>@AntalDelmaalOpnaaet() / @AntalDelmaalIAlt() delmål opnået i den valgte praktikperiode</p>
            }
        </div>
        <div id="plan">
            @if (aktivPeriode != null)
            {
                @foreach (var mål in aktivPeriode.ListMaal)
                {
                    <div class="maal-kort">
                        <h5>@mål.MaalNavn</h5>
                    </div>

                    <div class="delmaal-container">
                        @foreach (var delmål in mål.ListDelmaal)
                        {
                            <div class="delmaal">
                                <p><strong>@delmål.Beskrivelse</strong></p>
                                <p>Type: @delmål.DelmaalType</p>
                                <p>Ansvarlig: @delmål.Ansvarlig</p>
                                <p>Deadline: @(delmål.Deadline?.ToString("dd/MM-yyyy") ?? "-")</p>
                                <p>Kommentar: @delmål.DeadlineKommentar</p>
                                <p>Status: @(delmål.Status ? "✓ Opnået" : "✗ Ikke opnået")</p>
                            </div>
                        }
                    </div>
                    <br>
                }
            }
        </div>
    </div>
    <div class="sidepanel">
        Her implementerer vi deadlines - og evt. andre ting
    </div>
</div>



@code {
    //Gemmer den bruger som er logget ind
    private Bruger? loggedIn;
    //Gemmer planen for den bruger som er logget ind, ved at hente den i OnInitializedAsync
    private ElevplanModel? minPlan;
    //Sætter default visning til at være 0 (1 praktik), og gør det muligt at ændre visning til andre
    private int valgtPeriodeIndex = 0;
    private Praktikperiode? aktivPeriode => minPlan?.ListPerioder[valgtPeriodeIndex];

    //Tjekker om brugeren er logget ind, og gemmer som et objekt loggedIn - og sætter planen til at være brugerens elevplan
    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn();
        if (loggedIn == null)
        {
            navManager.NavigateTo("login/elevplan");
            return;
        }
        minPlan = loggedIn.MinElevplan;
        
        //Denne del kan vi bruge til manuelt at ændre status på antallet af delmål med status færdig, uden at have rediger funktion
        //Bruges til at teste statusbar og dens farver
        var alleDelmaal = minPlan?.ListPerioder
            .SelectMany(p => p.ListMaal)
            .SelectMany(m => m.ListDelmaal)
            .Take(9);

        if (alleDelmaal != null)
        {
            foreach (var d in alleDelmaal)
                d.Status = true;
        }
    }
    
    //Bruges til at beregne hvor mange delmål der er i den aktive periode (visningsperioden)
    private int AntalDelmaalIAlt()
    {
        if (aktivPeriode == null)
            return 0;

        int antal = 0;

        foreach (var mål in aktivPeriode.ListMaal)
        {
            antal += mål.ListDelmaal.Count;
        }

        return antal;
    }
    
    //Bruges til at beregne antal delmål som er opnået
    private int AntalDelmaalOpnaaet()
    {
        if (aktivPeriode == null)
            return 0;

        int opnaaet = 0;

        foreach (var mål in aktivPeriode.ListMaal)
        {
            foreach (var delmål in mål.ListDelmaal)
            {
                if (delmål.Status)
                    opnaaet++;
            }
        }

        return opnaaet;
    }
}