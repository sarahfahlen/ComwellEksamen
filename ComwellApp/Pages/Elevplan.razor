@page "/elevplan"                    
@page "/elevplan/{elevId:int}"      

@inject ILoginService lService              
@inject IBrugereService bService            
@inject IElevplanService eService            
@inject NavigationManager navManager        
@using ComwellApp.Services.Brugere          
@using ComwellApp.Services.Login
@using Shared                                
@using ElevplanModel = Shared.Elevplan       
@using ComwellApp.Components                 
@using ComwellApp.Services.Elevplan

<PageTitle>Elevplan</PageTitle>             

<!-- Hele layoutet for elevplansvisning -->
<div class="elevplan-layout">

    @* Hvis elevplan eller valgt elev ikke er indlæst endnu, vises en loading-tekst *@
    @if (valgtElev == null || minPlan == null)
    {
        <p>Indlæser elevplan...</p>
    }
    else
    {
        <div class="main-indhold">
            <div class="elevplan-header">
                <h1>Min elevplan</h1>

                @* Viser periodevælger kun hvis der faktisk er praktikperioder *@
                @if (minPlan?.ListPerioder != null)
                {
                    <div class="periode-wrapper">
                        <span class="periode-label">Se periode</span>
                        <div class="periode-knapper">
                            @for (int i = 0; i < minPlan.ListPerioder.Count; i++)
                            {
                                <button class="periodeknap" @onclick="() => valgtPeriodeIndex = i">
                                    @(i + 1)
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Viser elevens oplysninger -->
            <div id="elevoplysning">
                <div id="elevdata">
                    <div class="elevdata-grid">
                        <div class="elevdata-label"> <strong> Navn </strong></div>
                        <div class="elevdata-value">@valgtElev?.Navn</div>

                        <div class="elevdata-label"><strong> Elev siden </strong></div>
                        <div class="elevdata-value">@valgtElev.StartDato</div>

                        <div class="elevdata-label"><strong> Ansvarlig køkkenchef </strong></div>
                        <div class="elevdata-value">@valgtElev.MinElevplan.Ansvarlig.Navn</div>

                        <div class="elevdata-label"><strong> Lokation for elevtid </strong></div>
                        <div class="elevdata-value">@valgtElev.Afdeling.LokationNavn</div>
                    </div>
                </div>

                <!-- Viser profilbillede hvis der er et -->
                <div id="elevbillede">
                    @if (!string.IsNullOrEmpty(valgtElev.Billede))
                    {
                        <img src="@valgtElev.Billede" alt="Elevbillede" class="elevbillede-img"/>
                    }
                </div>
            </div>

            <!-- Statusbar med gennemførte delmål -->
            <div id="statusbar">
                @if (AntalDelmaalIAlt() > 0)
                {
                    // Beregner hvor stor en procentdel af delmålene der er opnået
                    double procent = (double)AntalDelmaalOpnaaet() / AntalDelmaalIAlt() * 100;
                    int procentInt = (int)Math.Round(procent);

                    // Gradientfarver til baggrunden
                    string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

                    // Selve statusbaren, som klipper baggrund efter procent
                    <div class="statusbar-outer">
                        <div class="statusbar-inner" style="background:@gradient; clip-path: inset(0 calc(@(100 - procentInt)%) 0 0);"></div>
                    </div>

                    <p>@AntalDelmaalOpnaaet() / @AntalDelmaalIAlt() delmål opnået i den valgte praktikperiode</p>
                }
            </div>
            @if (loggedIn?.Rolle == "Køkkenchef" || loggedIn?.Rolle == "FaglærtKok" || loggedIn?.Rolle == "HR")
            {
                <button class="btn btn-primary tilfoej-knap" @onclick="VisTilfoejDelmaalModal">+ Tilføj delmål</button>
            }

            <!-- Viser elevplanens mål og delmål -->
            <div id="plan">
                @if (aktivPeriode != null)
                {
                    @foreach (var maal in filtreredeMaal)
                    {
                        <div class="maal-kort">
                            <h5>@maal.MaalNavn</h5>
                        </div>

                        <DelmaalComponent maal="maal"
                                          OnInputDelmaal="AabenKommentar"
                                          OnToggleStatus="ToggleStatus" />
                    }
                }
            </div>
            <ModalDialog @ref="tilfoejDelmaalDialog" Title="Tilføj nyt delmål">
                <div class="modal-form">
                    <label>Vælg praktikperiode</label>
                    <select class="form-control" @bind="valgtPeriodeIndexTilDelmaal">
                        <option value="-1">-- Vælg periode --</option>
                        @for (int i = 0; i < minPlan?.ListPerioder.Count; i++)
                        {
                            <option value="@i">Periode @(i + 1)</option>
                        }
                    </select>

                    @if (valgtPeriodeIndexTilDelmaal >= 0)
                    {
                        <label class="mt-2">Vælg mål</label>
                        <select class="form-control" @bind="valgtMaalIdTilDelmaal">
                            @foreach (var maal in maalTilValgtPeriode)
                            {
                                <option value="@maal.MaalId">@maal.MaalNavn</option>
                            }
                        </select>

                        <label class="mt-2">Titel</label>
                        <InputText class="form-control" @bind-Value="nytDelmaal.Titel" />

                        <label class="mt-2">Beskrivelse</label>
                        <InputTextArea class="form-control" @bind-Value="nytDelmaal.Beskrivelse" />

                        <label class="mt-2">Type</label>
                        <select class="form-control" @bind="nytDelmaal.DelmaalType">
                            <option value="">-- Vælg delmålstype --</option>
                            @foreach (var type in unikkeDelmaalTyper)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                        <label class="mt-2">Deadline</label>
                        <InputDate class="form-control mb-2"
                                   @bind-Value="nytDelmaal.Deadline"
                                   disabled="@(!string.IsNullOrWhiteSpace(nytDelmaal.DeadlineKommentar))" />

                        <span class="form-label">Eller skriv en kommentar</span>
                        <InputText class="form-control"
                                   placeholder="Fx 'Senest efter uge 45'"
                                   @bind-Value="nytDelmaal.DeadlineKommentar"
                                   disabled="@(nytDelmaal.Deadline.HasValue)" />



                        <button class="btn btn-success mt-3" @onclick="GemDelmaal">Gem delmål</button>
                    }
                </div>

            </ModalDialog>


            <!-- Modal dialog til at vise og redigere kommentarer -->
            <ModalDialog @ref="kommentarDialog" Title="Kommentarer til delmål">
                <div class="modal-form">
                    <!-- Elevens kommentar -->
                    <label><strong>Elevens kommentar</strong></label>

                    @if (!string.IsNullOrWhiteSpace(elevKommentarNavn) && elevKommentarDato != null)
                    {
                        <p class="kommentar-info">
                            <strong>@elevKommentarNavn</strong>, @elevKommentarDato?.ToString("dd.MM.yyyy"):
                        </p>
                    }

                    @if (loggedIn?.Rolle == "Elev") // Kun elev må redigere sin egen kommentar
                    {
                        <InputTextArea class="form-control kommentarbox" style="height:14rem;" @bind-Value="elevKommentar" />
                    }
                    else if (!string.IsNullOrWhiteSpace(elevKommentar))
                    {
                        <p>@elevKommentar</p>
                    }
                    else
                    {
                        <p><em>Ingen elevkommentar endnu.</em></p>
                    }

                    <!-- Kokkens kommentar -->
                    <label class="mt-3"><strong>Kok og køkkenchef's kommentar</strong></label>

                    @if (!string.IsNullOrWhiteSpace(kokKommentarNavn) && kokKommentarDato != null)
                    {
                        <p class="kommentar-info">
                            <strong>@kokKommentarNavn</strong>, @kokKommentarDato?.ToString("dd.MM.yyyy"):
                        </p>
                    }
                    
                    <!-- Sørger for at både køkkenchef og kok kan redigere kommentar -->
                    @if (loggedIn?.Rolle == "Køkkenchef" || loggedIn?.Rolle == "FaglærtKok")
                    {
                        <InputTextArea class="form-control kommentarbox" style="height:14rem;" @bind-Value="kokKommentar" />
                    }
                    else if (!string.IsNullOrWhiteSpace(kokKommentar))
                    {
                        <p>@kokKommentar</p>
                    }
                    else
                    {
                        <p><em>Ingen kokkekommentar endnu.</em></p>
                    }

                    <button class="Gemkommentarknap" @onclick="GemKommentar">Gem kommentar</button>
                </div>
            </ModalDialog>
        </div>

        <!-- Sidepanel med søgning og filtrering -->
        <div class="sidepanel">
            <div class="sidepanel-værktøj">
                <label for="soeg">Søg delmål</label>
                <input type="text" id="soeg" class="soeg-input" placeholder="Skriv søgeord..."
                       @bind="soegeord" @oninput="async _ => await OpdaterFiltreredeMaal()" />
            </div>

            <div class="sidepanel-værktøj">
                <label for="filter">Filtrer efter mål</label>
                <button class="filter-knap" @onclick="() => visFilter = !visFilter">Filtrer</button>

                @if (visFilter)
                {
                    <div style="margin-top: 1rem;">
                        <label>Mål</label>
                        <InputSelect class="form-control" @bind-value="ValgtMaalNavn" @oninput="OnChangeMaal">
                            <option value="">Alle mål</option>
                            @foreach (var m in aktivPeriode?.ListMaal ?? new())
                            {
                                <option value="@m.MaalNavn">@m.MaalNavn</option>
                            }
                        </InputSelect>


                        <label class="mt-2">Delmålstype</label>
                        <select class="form-control" @bind="ValgtDelmaalType" @bind:event="onchange">
                            <option value="">Alle typer</option>
                            @foreach (var t in aktivPeriode?.ListMaal.SelectMany(m => m.ListDelmaal).Select(d => d.DelmaalType).Distinct() ?? new List<string>())
                            {
                                <option value="@t">@t</option>
                            }
                        </select>

                        <label class="mt-2">Status</label>
                        <select class="form-control" @onchange="OnStatusChanged">
                        <option value="">Alle</option>
                            <option value="true">Gennemført</option>
                            <option value="false">Ikke gennemført</option>
                        </select>
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {

    // Den bruger der lige nu er logget ind (hentes fra LocalStorage via LoginService)
    private Bruger? loggedIn;

    // Den elevplan vi arbejder med (enten ens egen eller én man ser som HR/Køkkenchef)
    private ElevplanModel? minPlan;

    // Index til at vælge hvilken praktikperiode der vises (starter på 0 = første periode)
    private int valgtPeriodeIndex = 0;

    // Den praktikperiode vi har valgt – bruges til at hente mål og delmål der hører til perioden
    private Praktikperiode? aktivPeriode => minPlan?.ListPerioder[valgtPeriodeIndex];

    // Refererer til modal-dialogboksen der åbnes, når man klikker "Se kommentar"
    private ModalDialog? kommentarDialog;

    // ✍Disse to er bundet til tekstfelterne i modalen (elevens og kokkens kommentarer)
    private string elevKommentar = "";
    private string kokKommentar = "";

    // Navn og dato for hvem der har skrevet kommentarerne (vises i toppen af modal)
    private string? elevKommentarNavn;
    private DateOnly? elevKommentarDato;
    private string? kokKommentarNavn;
    private DateOnly? kokKommentarDato;

    // Bruges til at huske hvilket delmål vi redigerer kommentar til
    private int aktivtDelmaalId = 0;

    // Søge- og filterfelter til højresiden
    private List<Maal> filtreredeMaal = new(); // Indeholder mål og deres delmål efter filtrering
    private string soegeord = "";
    private string valgtMaalNavn = "";
    private string valgtDelmaalType = "";
    private bool visFilter = false;
    private bool? valgtStatus = null;

// Det valgte mål ID fra dropdown
    private int valgtMaalIdTilDelmaal;

    // Hvis vi besøger siden med f.eks. elevId i URL’en, så læser vi det her
    [Parameter] public int? elevId { get; set; }

    // Den elev vi arbejder med (kan være én selv eller en anden)
    private Bruger? valgtElev;

    private ModalDialog? tilfoejDelmaalDialog;

// Midlertidigt nyt delmål
    private Delmaal nytDelmaal = new();

    private int valgtPeriodeIndexTilDelmaal = -1;
    private List<Maal> maalTilValgtPeriode = new();







    // 🟡 Kører hver gang der kommer parametre (fx ved skift af elevId i URL)
    protected override async Task OnParametersSetAsync()
    {
        // Henter den loggede bruger fra LoginService
        loggedIn = await lService.GetUserLoggedIn();

        if (loggedIn == null)
        {
            // Hvis ingen er logget ind, redirecter vi til login
            navManager.NavigateTo("login/elevplan");
            return;
        }

        // Hvis en elev forsøger at tilgå en anden elevs plan via URL – så næg adgang
        if (loggedIn.Rolle == "Elev" && elevId.HasValue && elevId.Value != loggedIn.BrugerId)
        {
            navManager.NavigateTo("/dashboard");
            return;
        }

        // Hvis HR/Admin/Køkkenchef ser en specifik elevplan
        if (elevId.HasValue && elevId != loggedIn.BrugerId)
        {
            var alleElever = await lService.HentEleverTilElevplanVisning();
            valgtElev = alleElever.FirstOrDefault(e => e.BrugerId == elevId.Value);

            if (valgtElev != null)
            {
                minPlan = valgtElev.MinElevplan;
            }
            else
            {
                navManager.NavigateTo("/dashboard");
                return;
            }
        }
        else
        {
            // 👤 Hvis det er elev eller faglært kok, der kigger på sin egen plan
            valgtElev = loggedIn;
            minPlan = loggedIn.MinElevplan;
        }

        await OpdaterFiltreredeMaal();

        // 🆕 Udfylder dropdown med unikke delmålstyper
        unikkeDelmaalTyper = aktivPeriode?
            .ListMaal
            .SelectMany(m => m.ListDelmaal)
            .Select(d => d.DelmaalType)
            .Distinct()
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .ToList() ?? new();
    }

    // Tæller hvor mange delmål der findes i den valgte periode
    private int AntalDelmaalIAlt()
    {
        if (aktivPeriode == null)
            return 0;

        int antal = 0;
        foreach (var mål in aktivPeriode.ListMaal)
        {
            antal += mål.ListDelmaal.Count;
        }

        return antal;
    }

    // Tæller hvor mange af delmålene i perioden der er gennemført
    private int AntalDelmaalOpnaaet()
    {
        if (aktivPeriode == null)
            return 0;

        int opnaaet = 0;
        foreach (var mål in aktivPeriode.ListMaal)
        {
            foreach (var delmål in mål.ListDelmaal)
            {
                if (delmål.Status)
                    opnaaet++;
            }
        }

        return opnaaet;
    }

    // Kaldes når man klikker "Se kommentar" – viser kommentarer for det valgte delmål
    private async Task AabenKommentar(int delmaalId)
    {
        aktivtDelmaalId = delmaalId;

        // Nulstiller tidligere kommentarer fra modal, så der ikke vises gamle
        elevKommentar = kokKommentar = "";
        elevKommentarNavn = kokKommentarNavn = null;
        elevKommentarDato = kokKommentarDato = null;

        if (minPlan != null)
        {
            // Henter elevens kommentar til delmålet via IElevplanService
            var _elevKommentar = await eService.GetKommentarAsync(minPlan.ElevplanId, delmaalId, "Elev");
            if (_elevKommentar != null)
            {
                elevKommentar = _elevKommentar.Tekst;
                elevKommentarNavn = _elevKommentar.OprettetAf?.Navn;
                elevKommentarDato = _elevKommentar.Dato;
            }

            // Henter køkkenchefens/kokkens kommentar på samme måde
            var _kokKommentar = await eService.GetKommentarAsync(minPlan.ElevplanId, delmaalId, "FaglærtKok");
            ;
            if (_kokKommentar != null)
            {
                kokKommentar = _kokKommentar.Tekst;
                kokKommentarNavn = _kokKommentar.OprettetAf?.Navn;
                kokKommentarDato = _kokKommentar.Dato;
            }
        }

        kommentarDialog?.Open(); //  Åbner modal
    }

    // Gemmer kommentar (enten elevens eller køkkenchefens/kokkens)
    private async Task GemKommentar()
    {
        if (minPlan == null || loggedIn == null)
            return;

        if (loggedIn.Rolle == "Elev")
        {
            var eksisterende = await eService.GetKommentarAsync(minPlan.ElevplanId, aktivtDelmaalId, "Elev");

            if (eksisterende != null)
            {
                // Kalder RedigerKommentar i IElevplanService
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende.KommentarId, elevKommentar);
            }
            else if (!string.IsNullOrWhiteSpace(elevKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAf = loggedIn,
                    Tekst = elevKommentar
                };
                // Kalder TilfoejKommentar i IElevplanService
                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }
        else if (loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "FaglærtKok")
        {
            var eksisterende = await eService.GetKommentarAsync(minPlan.ElevplanId, aktivtDelmaalId, "FaglærtKok");
            ;

            if (eksisterende != null)
            {
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende.KommentarId, kokKommentar);
            }
            else if (!string.IsNullOrWhiteSpace(kokKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAf = loggedIn,
                    Tekst = kokKommentar
                };
                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }

        kommentarDialog?.Close(); // Lukker modalen efter gem
        // TODO: Giv bruger feedback på om det lykkedes eller fejlede
    }

    //Funktion der bruges til at ændre status på et delmaal
    private async Task ToggleStatus(Delmaal delmaal)
    {
        //Tjekker om den som er logget ind har rettighederne
        if (loggedIn == null || !(loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "FaglærtKok" || loggedIn.Rolle == "Admin"))
            return;

        //ændrer status på delmålet, og gemmer det i loggen
        delmaal.Status = !delmaal.Status;

        if (delmaal.Status)
        {
            delmaal.StatusLog = $"Ændret af {loggedIn.Navn} d. {DateTime.Now:dd/MM-yyyy}";
        }

        try
        {
            await eService.OpdaterStatus(minPlan, delmaal);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ToggleStatus] FEJL: {ex.Message}");
        }


    }
    
    private async Task OpdaterFiltreredeMaal()
    {
        if (valgtElev == null)
            return;

        filtreredeMaal = await eService.HentFiltreredeMaal(
            valgtElev.BrugerId,
            valgtPeriodeIndex,
            valgtMaalNavn,
            valgtDelmaalType,
            soegeord,
            valgtStatus);

        StateHasChanged(); // Opdater UI
    }

    // Gemmer det valgte mål-navn fra dropdown
    private string ValgtMaalNavn
    {
        get => valgtMaalNavn;
        set
        {
            valgtMaalNavn = value;

            // Hver gang bruger vælger et nyt mål, opdateres listen af mål og delmål
            _ = OpdaterFiltreredeMaal();
        }
    }

    // Gemmer den valgte delmålstype fra dropdown
    private string ValgtDelmaalType
    {
        get => valgtDelmaalType;
        set
        {
            valgtDelmaalType = value;

            // Hver gang bruger vælger en ny type, opdateres listen
            _ = OpdaterFiltreredeMaal();
        }
    }


    // Kaldes når bruger ændrer status-filteret (gennemført/ikke gennemført)
    private async void OnStatusChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(value))
        {
            valgtStatus = null;
        }
        else if (value.Equals("true", StringComparison.OrdinalIgnoreCase))
        {
            valgtStatus = true;
        }
        else if (value.Equals("false", StringComparison.OrdinalIgnoreCase))
        {
            valgtStatus = false;
        }

        await OpdaterFiltreredeMaal();

        StateHasChanged(); // Tving UI til at opdatere med nye filtre
    }

    private void OnChangeMaal(ChangeEventArgs obj)
    {
        valgtMaalNavn = obj.Value.ToString();
        Console.WriteLine($"mål der er valgt er: {valgtMaalNavn}");
    }

// Åbn modal + nulstil data
    private async void VisTilfoejDelmaalModal()
    {
        nytDelmaal = new Delmaal();
        valgtPeriodeIndexTilDelmaal = -1;
        valgtMaalIdTilDelmaal = 0;
        await HentTyperFraBackend();
        await HentMaalFraBackend(); 
        tilfoejDelmaalDialog?.Open();
    }

// Gemmer og sender til backend
    private async Task GemDelmaal()
    {
        if (minPlan == null)
            return;

        if (valgtPeriodeIndexTilDelmaal < 0 || valgtMaalIdTilDelmaal == 0)
        {
            Console.WriteLine("⚠️ Praktikperiode eller mål ikke valgt");
            return;
        }

        if (string.IsNullOrWhiteSpace(nytDelmaal.Titel))
        {
            Console.WriteLine("⚠️ Titel mangler");
            return;
        }

        bool harDato = nytDelmaal.Deadline.HasValue;
        bool harKommentar = !string.IsNullOrWhiteSpace(nytDelmaal.DeadlineKommentar);

        try
        {
            await eService.TilfoejDelmaal(minPlan, valgtMaalIdTilDelmaal, nytDelmaal);
            tilfoejDelmaalDialog?.Close();
            await OpdaterFiltreredeMaal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[GemDelmaal] FEJL: {ex.Message}");
        }
    }
    private List<string> unikkeDelmaalTyper = new();

    private async Task HentTyperFraBackend()
    {
        if (minPlan != null && valgtPeriodeIndexTilDelmaal >= 0)
        {
            unikkeDelmaalTyper = await eService.HentDelmaalTyperFraPeriode(minPlan.ElevplanId, valgtPeriodeIndexTilDelmaal);
        }
    }

    private async Task HentMaalFraBackend()
    {
        if (minPlan != null && valgtPeriodeIndexTilDelmaal >= 0)
        {
            maalTilValgtPeriode = await eService.HentMaalFraPeriode(minPlan.ElevplanId, valgtPeriodeIndexTilDelmaal);
        }
    }

}
    


