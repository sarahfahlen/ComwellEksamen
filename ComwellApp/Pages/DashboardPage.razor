@page "/dashboard" 


@inject NavigationManager navManager
@inject ILoginService lService
@inject IBrugereService bService
@inject IJSRuntime JS
@inject ILokationService loService


@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using ComwellApp.Services.Lokation
@using Shared

<PageTitle>Dashboard</PageTitle> <!-- Vises i browserens faneblad -->

<!-- Header med overskrift, søg, filtrer og opret-knap -->
<div class="overskrift-knap-wrapper">
    <h1 class="overskrift">Elevoversigt</h1>

    <!-- Søgefelt + søgeknap -->
    <div class="filter-boxcontainer">
        <input type="text" id="soeg" class="soeg-input" placeholder="Skriv elevnavn..." @bind-value="soegeord" @bind-value:event="oninput" @onkeypress="HandleKeyPress" />

        <button class="soege-knap" @onclick="SoegningKnap">Søg</button>

        <div class="filter-eksport-wrapper">
            <button class="filter-knap" @onclick="() => visFilter = !visFilter">
                @(visFilter ? "Luk filter" : "Filtrer")
            </button>

            @if (loggedIn is not null && (loggedIn.Rolle == "Admin" || loggedIn.Rolle == "HR"))
            {
                <button class="btn exportknap" @onclick="EksporterElever"></button>
            }
        </div>
    </div>

    <div class = "navKnapper">
    @if (loggedIn?.Rolle == "Admin" || loggedIn?.Rolle == "Køkkenchef" || loggedIn?.Rolle == "HR")
    {
        <button class="btn btn-primary Deadlines" @onclick="DeadlinesKnap">Deadlines</button>
    }
    
    <!-- Viser kun knappen "Opret elev", hvis den loggede bruger har en rolle der må -->
    @if (loggedIn is not null && (loggedIn.Rolle == "Admin" || loggedIn.Rolle == "HR"))
    {
        <button class="btn btn-primary opret-knap" @onclick="OnClickOpret">Opret elev</button>
    }
    </div>
</div>

@if (visFilter)
{ 
    <div class="filter-box">
        <div class="filter-row">
            <div class="filter-item" style="flex: 1;">
                <label>Lokation</label>
                <InputSelect class="form-control" @bind-Value="ValgtAfdelingId" @oninput="OnChangeAfdeling"
                             disabled="@(loggedIn?.Rolle != "Admin" && loggedIn?.Rolle != "HR")">
                    <option value="">Alle lokationer</option>
                    @foreach (var l in lokationer)
                    {
                        <option value="@l._id">@l.LokationNavn</option>
                    }
                </InputSelect>
            </div>
            <div class="filter-item" style="flex: 1;">
                <label>Kursus</label>
                <InputSelect class="form-control" @bind-Value="ValgtKursus" @oninput="OnChangeKursus">
                    <option value="">Alle kurser</option>
                    @foreach (var k in kurser)
                    {
                        <option value="@k">@k</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="filter-row">
            <div class="filter-item" style="flex: 2.05;">
                <label>Erhverv</label>
                <InputSelect class="form-control" @bind-Value="ValgtErhverv" @oninput="OnChangeErhverv">
                    <option value="">Alle erhverv</option>
                    @foreach (var erhverv in erhvervMuligheder)
                    {
                        <option value="@erhverv">@erhverv</option>
                    }
                </InputSelect>
            </div>

            <div class="filter-item" style="flex: 1;">
                <label>Deadline</label>
                <InputSelect class="form-control" @bind-Value="ValgtDeadlineValg" @oninput="OnChangeDeadline" TValue="string">
                    <option value="">Alle</option>
                    <option value="overskredet">Overskredet</option>
                </InputSelect>
            </div>

            <div class="filter-item" style="flex: 1;">
                <label>Status</label>
                <InputSelect class="form-control" @bind-Value="ValgtStatus" @oninput="OnChangeStatus"
                             disabled="@string.IsNullOrWhiteSpace(valgtKursus)">
                    <option value="">Alle</option>
                    <option value="gennemført">Gennemført</option>
                    <option value="ikke">Ikke gennemført</option>
                </InputSelect>
            </div>
        </div>
        <div>
            <button class="nulstil-filterknap" @onclick="NulstilFilter">Nulstil filter</button>
        </div>
    </div>
}


<!-- Her vises alle elever som kort -->
<div class="elevkort-container">
    @if (elever == null || !elever.Any())
    {
        <p>Indlæser elever...</p>
    }
    else
    {
        @foreach (var elev in elever)
        {
            // Vi beregner hvor mange delmål eleven har opnået
            var (opnaaet, iAlt) = BeregnFremgang(elev);
            double procent = iAlt > 0 ? (double)opnaaet / iAlt * 100 : 0;
            int procentInt = (int)Math.Round(procent);

            // Gradient til statusbaren
            string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

            <div class="item-card">
                <div class="item-grid">
                    <!-- Venstre kolonne med navn og kontakt -->
                    <div class="item-left">
                        <h5>@elev.Navn</h5>
                        <p>Telefon: @elev.BrugerTelefon</p>
                        <p>Køkkenchef: @elev.MinElevplan?.Ansvarlig?.Navn</p>
                        <p>Elev siden: @elev.StartDato?.ToString("dd-MM-yyyy")</p>
                    </div>

                    <!-- Midterkolonne med fremgang -->
                    <div class="item-center">
                        <p>Lokation: @(elev.AfdelingId != null && lokationLookup.TryGetValue(elev.AfdelingId.Value, out var lok) ? lok.LokationNavn : "Ukendt")</p>
                        <p>Delmål opnået: @opnaaet / @iAlt</p>
                        <div class="statusbar-outer">
                            <div class="statusbar-inner" style="background: @gradient; clip-path: inset(0 calc(100% - @procentInt%) 0 0);"></div>
                        </div>
                    </div>

                    <!-- Højre kolonne med billede -->
                    <div class="item-right">
                        <img src="@GetProfilbilledeSti(elev.Billede)" alt="Profilbillede" class="profilbillede-dashboard" />

                    </div>
                </div>

                <!-- Knappen til at gå til elevers elevplan -->
                @if (
                    (loggedIn.Rolle == "Elev" && elev.AfdelingId == loggedIn.AfdelingId) ||
                    (loggedIn._id == elev._id && loggedIn.Rolle == "Elev") ||
                    (loggedIn?.Rolle == "Admin" || loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "HR" || loggedIn.Rolle == "FaglærtKok")
                )

                {
                    <button class="btn btn-outline-secondary se-elevplan-knap" @onclick="@(() => GåTilElevplan(elev._id))">
                        Se elevplan
                    </button>
                }
            </div>
        }
    }
</div>
@code {
    // Den bruger der er logget ind i systemet
    private Bruger? loggedIn;

    // Liste over alle elever fra databasen (brugt til filtrering)
    private List<Bruger> alleElever = new();

    // Den liste vi viser på siden (kan være filtreret udgave af alleElever)
    private List<Bruger> elever = new();
    
    private string soegeord = "";
    private int? valgtAfdelingId = null;
    private string valgtKursus = "";
    private string valgtErhverv = "";
    private string valgtDeadlineValg = ""; // "overskredet" eller ""
    private int? valgtDeadline = null;
    private List<string> kurser = new();
    private string valgtStatus = "";
    private bool visFilter = false;
    private List<Lokation> lokationer = new();
    private List<string> erhvervMuligheder = new();
    //matcher elevens lokationId med lokationen fra backend
    private Dictionary<int, Lokation> lokationLookup = new();

    // Når siden loades (komponent initialiseres), henter vi data
    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn(); // hentes fra LocalStorage via LoginService

        if (loggedIn == null)
        {
            // Hvis man ikke er logget ind, sendes man til login
            navManager.NavigateTo("login/dashboard");
            return;
        }

        // Hent alle elever via IBrugereService (sender kald til backend)
        alleElever = await bService.HentAlleElever();

        lokationer = await loService.HentKoekkenLokationer();
        lokationLookup = lokationer.ToDictionary(l => l._id, l => l);
        erhvervMuligheder = await bService.HentAlleErhverv();
        kurser = await bService.HentAlleKurser();
        FiltrerElever(); // sortér elever baseret på rolle/lokation
    }

    //  elever: fx kun dem med samme lokation som brugeren – hvis rollen kræver det
    private void FiltrerElever()
    {
        if (loggedIn == null) return;

        // For elev, faglært kok og køkkenchef vises kun elever fra samme lokation
        if (loggedIn.Rolle == "Elev" || loggedIn.Rolle == "FaglærtKok" || loggedIn.Rolle == "Køkkenchef")
        {
            elever = alleElever
                .Where(e => e.AfdelingId != null && e.AfdelingId == loggedIn.AfdelingId)
                .ToList();
        }
        else
        {
            elever = alleElever;
        }
    }


    // Navigerer til opret-elev siden, når man trykker "Opret elev"
    private void OnClickOpret()
    {
        navManager.NavigateTo("opretelev");
    }
    private void DeadlinesKnap()
    {
        navManager.NavigateTo("deadlines");
    }
    // Navigerer til den specifikke elevs elevplan
    private void GåTilElevplan(int elevId)
    {
        navManager.NavigateTo($"elevplan/{elevId}");
    }

    // Beregner hvor mange delmål en elev har opnået i alt (på tværs af ALLE praktikperioder)
    private (int opnaaet, int iAlt) BeregnFremgang(Bruger elev)
    {
        if (elev?.MinElevplan?.ListPerioder == null)
            return (0, 0); // Hvis elevplan ikke er sat, er der ikke noget at vise

        int total = 0;
        int opnaaet = 0;

        foreach (var periode in elev.MinElevplan.ListPerioder)
        {
            foreach (var maal in periode.ListMaal)
            {
                total += maal.ListDelmaal.Count;
                opnaaet += maal.ListDelmaal.Count(d => d.Status);
            }
        }

        return (opnaaet, total); // Returnerer både opnåede og samlede mål
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SoegningKnap();
        }
    }

    private async Task SoegningKnap()
    {
        await OpdaterFiltreredeElever();
    }

    private async Task OpdaterFiltreredeElever()
    {
        if (loggedIn == null) return;

        // Brug den valgte afdeling fra dropdown, ikke kun den indloggede
        var afdelingTilFiltrering = (loggedIn.Rolle == "Admin" || loggedIn.Rolle == "HR")
            ? valgtAfdelingId
            : loggedIn.AfdelingId;

        elever = await bService.HentFiltreredeElever(
            soegeord,
            valgtKursus,
            valgtErhverv,
            valgtDeadline,
            loggedIn.Rolle,
            valgtStatus,
            afdelingTilFiltrering
        );

        StateHasChanged();
    }

    private async Task NulstilFilter()
    {
        // Nulstil alle filterfelter
        soegeord = "";
        valgtKursus = "";
        valgtErhverv = "";
        valgtDeadlineValg = "";
        valgtDeadline = null;
        valgtStatus = "";
        valgtAfdelingId = null;

        // Opdater visningen med alle elever
        await OpdaterFiltreredeElever();
    }
    
    // Gemmer det valgte lokation fra dropdown
    private int? ValgtAfdelingId
    {
        get => valgtAfdelingId;
        set
        {
            valgtAfdelingId = value;
            _ = OpdaterFiltreredeElever();
        }
    }
    
    // Når et lokation vælges i dropdown
    private async Task OnChangeAfdeling(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
            valgtAfdelingId = id;
        else
            valgtAfdelingId = null;

        await OpdaterFiltreredeElever();
    }
    
    // Gemmer det valgte erhverv fra dropdown
    private string ValgtErhverv
    {
        get => valgtErhverv;
        set
        {
            valgtErhverv = value;

            // Hver gang bruger vælger et nyt mål, opdateres listen af mål og delmål
            _ = OpdaterFiltreredeElever();
        }
    }
    
    // Når et erhverv vælges i dropdown
    private async Task OnChangeErhverv(ChangeEventArgs e)
    {
        valgtErhverv = e.Value?.ToString() ?? "";
        Console.WriteLine($"Mål valgt: {valgtErhverv}");

        await OpdaterFiltreredeElever(); // Kalder backend for at hente nye mål
    }
    
    // Property der håndterer ændringer i dropdown
    private string ValgtDeadlineValg
    {
        get => valgtDeadlineValg;
        set
        {
            valgtDeadlineValg = value;

            if (string.IsNullOrWhiteSpace(value))
                valgtDeadline = null;
            else if (value == "overskredet")
                valgtDeadline = 0;

            _ = OpdaterFiltreredeElever();
        }
    }
    
    private async Task OnChangeDeadline(ChangeEventArgs e)
    {
        valgtDeadlineValg = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(valgtDeadlineValg))
            valgtDeadline = null;
        else if (valgtDeadlineValg == "overskredet")
            valgtDeadline = 0;

        Console.WriteLine($"Deadline valgt: {valgtDeadlineValg} → {valgtDeadline}");

        await OpdaterFiltreredeElever();
    }
    
    // Gemmer det valgte kursus fra dropdown
    private string ValgtKursus
    {
        get => valgtKursus;
        set
        {
            valgtKursus = value;

            // Hver gang bruger vælger et nyt mål, opdateres listen af mål og delmål
            _ = OpdaterFiltreredeElever();
        }
    }
    
    private async Task OnChangeKursus(ChangeEventArgs e)
    {
        valgtKursus = e.Value?.ToString() ?? "";

        // Nulstil statusvalg hvis kursus fjernes
        if (string.IsNullOrWhiteSpace(valgtKursus))
        {
            valgtStatus = "";
        }

        Console.WriteLine($"Kursus valgt: {valgtKursus}");

        await OpdaterFiltreredeElever();
    }
    
    private string ValgtStatus
    {
        get => valgtStatus;
        set
        {
            valgtStatus = value;
            _ = OpdaterFiltreredeElever();
        }
    }
    
    private async Task OnChangeStatus(ChangeEventArgs e)
    {
        valgtStatus = e.Value?.ToString() ?? "";
        await OpdaterFiltreredeElever();
    }
    
    private async Task EksporterElever()
    {
        if (loggedIn == null)
            return;

        // Brug valgtAfdelingId direkte, uden at slå noget op
        var excelData = await bService.EksporterFiltreredeElever(
            soegeord,
            valgtKursus,
            valgtErhverv,
            valgtDeadline,
            loggedIn.Rolle,
            valgtStatus,
            valgtAfdelingId
        );

        using var streamRef = new DotNetStreamReference(new MemoryStream(excelData));
        await JS.InvokeVoidAsync("downloadFileFromStream", "Elever.xlsx", streamRef);
    }

    private string GetProfilbilledeSti(string? sti)
    {
        if (string.IsNullOrEmpty(sti) || sti == "billeder/intetprofilbillede.jpg")
            return "/billeder/intetprofilbillede.jpg"; // frontend

        return $"http://localhost:5237{sti}"; // backend
    }



}
