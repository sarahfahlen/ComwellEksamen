@page "/elevplan"
@page "/elevplan/{elevId:int}"

@inject ILoginService lService
@inject IBrugereService bService
@inject IElevplanService eService
@inject ILokationService loService
@inject NavigationManager navManager
@inject HttpClient http
@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using Shared
@using ComwellApp.Components
@using ComwellApp.Services.Elevplan
@using ComwellApp.Services.Lokation

<PageTitle>Elevplan</PageTitle>

@if (loggedIn?.Rolle == "Elev" && loggedIn._id != valgtElev?._id)
{
    <div class="alert alert-info">
        Du ser <strong>@valgtElev?.Navn</strong>s elevplan (kun læsevisning).
    </div>
}

<!-- Hele layoutet for elevplansvisning -->
<div class="elevplan-layout">

    @* Hvis elevplan eller valgt elev ikke er indlæst endnu, vises en loading-tekst *@
    @if (valgtElev == null || minPlan == null)
    {
        <p>Indlæser elevplan...</p>
    }
    else
    {
        <div class="main-indhold">
            <div class="elevplan-header">
                <h1 class="sideoverskriftelevplan">Min elevplan</h1>

                @* Viser periodevælger kun hvis der faktisk er praktikperioder *@
                @if (minPlan?.ListPerioder != null)
                {
                    <div class="periode-wrapper">
                        <span class="periode-label">Se periode</span>
                        <div class="periode-knapper">
                            @for (int i = 0; i < minPlan.ListPerioder.Count; i++)
                            {
                                var index = i;

                                <button class="periodeknap @(valgtPeriodeIndex == index ? "valgt" : "")"
                                        @onclick="async () => await SkiftPeriode(index)">
                                    @(index + 1)
                                </button>
                            }

                        </div>
                    </div>
                }
            </div>

            <!-- Viser elevens oplysninger -->
            <div id="elevoplysning">
                <div id="elevdata">
                    <div class="elevdata-grid">
                        <div class="elevdata-label"><strong> Navn </strong></div>
                        <div class="elevdata-value">@valgtElev?.Navn</div>

                        <div class="elevdata-label"><strong> Elev siden </strong></div>
                        <div class="elevdata-value">@valgtElev.StartDato</div>

                        <div class="elevdata-label"><strong> Ansvarlig køkkenchef </strong></div>
                        <div class="elevdata-value">@valgtElev.MinElevplan.Ansvarlig.Navn</div>

                        <div class="elevdata-label"><strong> Lokation for elevtid </strong></div>
                        <div class="elevdata-value">@valgtElevLokation?.LokationNavn</div>

                        @if (aktivPeriode != null)
                        {
                            <div class="elevdata-label"><strong> Slutdato for perioden </strong></div>
                            <div class="elevdata-value">@aktivPeriode.SlutDato / Dage tilbage: @BeregnDageTilbage()</div>
                        }
                        <div class="elevdata-label"><strong> Skole </strong></div>
                        <div class="elevdata-value skole-linje">
                            <span>
                                @if (aktivPeriode?.SkoleId != null)
                                {
                                    var valgtSkole = skoler.FirstOrDefault(s => s._id == aktivPeriode.SkoleId);
                                    @((valgtSkole != null) ? valgtSkole.LokationNavn : "Skole ikke valgt")
                                }
                                else
                                {
                                    <text>Skole ikke valgt</text>
                                }
                            </span>

                            @if (!isReadOnlyElevView && loggedIn?.Rolle != "Elev" && loggedIn?.Rolle != "FaglærtKok")
                            {
                                <button class="rediger-knap-inline" @onclick="AabenRedigerSkole">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                         class="bi bi-pencil" viewBox="0 0 16 16">
                                        <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 
                         10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 
                         0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 
                         12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 
                         0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 
                         5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 
                         0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 
                         0 1-.468-.325"/>
                                    </svg>
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Viser profilbillede hvis der er et -->
                <div id="elevbillede">
                    @if (!string.IsNullOrEmpty(valgtElev.Billede))
                    {
                        <img src="@GetProfilbilledeSti(valgtElev.Billede)" alt="Elevbillede" class="elevbillede-img"/>
                    }
                </div>
            </div>

            <!-- Statusbar med gennemførte delmål -->
            <div id="statusbar">
                @if (AntalDelmaalIAlt() > 0)
                {
                    // Beregner hvor stor en procentdel af delmålene der er opnået
                    double procent = (double)AntalDelmaalOpnaaet() / AntalDelmaalIAlt() * 100;
                    int procentInt = (int)Math.Round(procent);

                    // Gradientfarver til baggrunden
                    string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

                    // Selve statusbaren, som klipper baggrund efter procent
                    <div class="statusbar-outer">
                        <div class="statusbar-inner"
                             style="background:@gradient; clip-path: inset(0 calc(@(100 - procentInt)%) 0 0);"></div>
                    </div>

                    <p style="margin-bottom: -3rem;">@AntalDelmaalOpnaaet() / @AntalDelmaalIAlt() delmål opnået i den
                        valgte praktikperiode</p>

                    <!-- Mobilvisning: søgning og filter -->
                    <div class="mobil-soeg-filter">
                        <div class="sidepanel-værktøj">
                            <label for="mobil-soeg">Søg delmål</label>
                            <input type="text" id="mobil-soeg" class="soeg-input" placeholder="Skriv søgeord..."
                                   @bind-value="soegeord" @bind-value:event="oninput" @onkeypress="HandleKeyPress"/>
                            <button class="soege-knap" @onclick="soegningknap">Søg</button>
                        </div>

                        <div class="sidepanel-værktøj">
                            <button class="filter-knap" @onclick="() => visFilter = !visFilter">
                                @(visFilter ? "Luk filter" : "Filtrer")
                            </button>

                            @if (visFilter)
                            {
                                <div class="filter-boks-anim" style="margin-top: 1rem;">
                                    <label>Mål</label>
                                    <InputSelect class="form-control" @bind-value="ValgtMaalNavn"
                                                 @oninput="OnChangeMaal">
                                        <option value="">Alle mål</option>
                                        @foreach (var m in aktivPeriode?.ListMaal ?? new())
                                        {
                                            <option value="@m.MaalNavn">@m.MaalNavn</option>
                                        }
                                    </InputSelect>

                                    <label class="mt-2">Delmålstype</label>
                                    <InputSelect class="form-control" @bind-value="ValgtDelmaalType"
                                                 @oninput="OnChangeDelmaalType">
                                        <option value="">Alle typer</option>
                                        @foreach (var t in aktivPeriode?.ListMaal.SelectMany(m => m.ListDelmaal).Select(d => d.DelmaalType).Distinct() ?? new List<string>())
                                        {
                                            <option value="@t">@t</option>
                                        }
                                    </InputSelect>

                                    <label class="mt-2">Status</label>
                                    <InputSelect class="form-control" @bind-value="ValgtStatus"
                                                 @oninput="OnChangeStatus">
                                        <option value="">Alle</option>
                                        <option value="true">Gennemført</option>
                                        <option value="false">Ikke gennemført</option>
                                    </InputSelect>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            @if (!isReadOnlyElevView && (loggedIn?.Rolle == "Køkkenchef" || loggedIn?.Rolle == "Admin"))
            {
                <button class="btn btn-primary tilfoej-delmaal-knap" @onclick="AabenTilfoejDelmaal">
                    Tilføj delmål
                </button>
            }
            <!-- Opret nyt delmaal, eller rediger eksisterende -->
            <ModalDialog @ref="tilfoejDelmaalDialog">
                @if (tilfoejDelmaalDialog != null)
                {
                    <OpretDelmaalComponent
                        @key="delmaalTilRedigering?._id"
                        minPlan="@minPlan"
                        RedigerDelmaal="delmaalTilRedigering"
                        OnGemSuccess="OpdaterFiltreredeMaal"
                        OnSuccessMessage="@((string msg) => successMessage = msg)"
                        OnClose="() =>
                        {
                            tilfoejDelmaalDialog.Close();
                            delmaalTilRedigering = null;
                        }" />
                }
            </ModalDialog>

            <ModalDialog @ref="opgaverDialog" Title="Opgaver for delmål">
                @if (aktivtDelmaalTilOpgaver?.ListOpgaver != null)
                {
                    <EditForm Model="aktivtDelmaalTilOpgaver" OnValidSubmit="GemOpgaver">

                        <div class="opgave-wrapper">
                            @for (int i = 0; i < aktivtDelmaalTilOpgaver.ListOpgaver.Count; i++)
                            {
                                var opgave = aktivtDelmaalTilOpgaver.ListOpgaver[i];
                                <div class="opgave-kort">
                                    <div class="opgave-titel-linje">
                                        <input type="checkbox"
                                               class="opgave-checkbox"
                                               checked="@opgave.OpgaveGennemfoert"
                                               @onchange="() => ToggleOpgaveStatus(opgave)"
                                               disabled="@(loggedIn?.Rolle != "FaglærtKok" && loggedIn?.Rolle != "Køkkenchef" && loggedIn?.Rolle != "Admin")"/>
                                        <p class="opgave-navn"><strong>@opgave.OpgaveNavn</strong></p>
                                    </div>
                                    <p class="opgave-detaljer">@opgave.OpgaveDetaljer</p>
                                    @if (!string.IsNullOrWhiteSpace(opgave.StatusLogOpgave))
                                    {
                                        <p class="opgavelog">@opgave.StatusLogOpgave</p>
                                    }
                                </div>
                            }
                            <button type="submit" class="Gemkommentarknap">Gem</button>
                        </div>
                    </EditForm>
                }
            </ModalDialog>
            <ModalDialog @ref="skoleDialog" Title="Vælg skole">
                <div class="modal-form">
                    <label for="skole-select">Vælg skole</label>
                    <InputSelect id="skole-select" class="form-control" @bind-Value="valgtSkoleIdAsString" @onchange="OnChangedSkoleValgt"
                    >
                    <option value="0">-- Vælg --</option>
                        @foreach (var skole in skoler)
                        {
                            <option value="@skole._id">@skole.LokationNavn</option>
                        }
                    </InputSelect>
                    <button class="Gemkommentarknap mt-3" @onclick="GemSkolevalg">Gem skolevalg</button>
                </div>
            </ModalDialog>





            <!-- Viser elevplanens mål og delmål -->
            <div id="plan">
                @if (filtreredeMaal.Any())
                {
                    @foreach (var maal in filtreredeMaal)
                    {
                        <div class="maal-kort">
                            <h5>@maal.MaalNavn</h5>
                        </div>

                        @if (!isReadOnlyElevView)
                        {
                            // Hvis brugeren IKKE er en elev, der kigger på en andens elevplan, vises DelmaalComponent med fuld funktionalitet:
                            <DelmaalComponent maal="maal"
                                              BrugerRolle="@loggedIn?.Rolle"
                                              OnInputDelmaal="AabenKommentar"
                                              OnToggleStatus="ToggleStatus"
                                              OnToggleIgang="ToggleIgangStatus"
                                              OnRedigerDelmaal="AabenRedigerDelmaal"
                                              OnVisOpgaver="AabenOpgaver"
                                              OnSletDelmaal="delmaal => SletDelmaal(minPlan, valgtPeriodeIndex, maal._id, delmaal._id)"/>
                        }
                        else
                        {
                            // Hvis brugeren ER en elev, der ser en andens elevplan, vises komponenten i en "readonly"-tilstand.
                            <DelmaalComponent maal="maal"
                                              BrugerRolle="ReadonlyElev"
                                              OnVisOpgaver="AabenOpgaver"/>
                        }
                    }
                }
                else
                {
                    <p><em>Ingen mål matcher dine filtre for denne periode.</em></p>
                }
            </div>

            <!-- Modal dialog til at vise og redigere kommentarer -->
            @if (!isReadOnlyElevView)
            {
                <ModalDialog @ref="kommentarDialog" Title="Kommentarer til delmål">
                    <div class="modal-form kommentar-modal-wrapper rolle-@loggedIn?.Rolle?.ToLower()">

                        <!-- Elevens kommentar -->
                        <label><strong>Elevens kommentar</strong></label>

                        @if (!string.IsNullOrWhiteSpace(elevKommentarNavn) && elevKommentarDato != null)
                        {
                            <p class="kommentar-info">
                                <strong>@elevKommentarNavn</strong>, @elevKommentarDato?.ToString("dd.MM.yyyy"):
                            </p>
                        }

                        <!-- Elevens kommentar -->
                        @if (loggedIn?.Rolle == "Elev")
                        {
                            <div class="kommentar-wrapper kommentar-elev">
                                <div class="kommentar-linje">
                                    <div class="kommentar-felt">
                                        <InputTextArea class="form-control kommentarbox" @bind-Value="elevKommentar" />
                                        <InputFile OnChange="OnBilledeValgtElev" accept="image/*" class="kommentar-upload" @key="aktivtDelmaalId" />
                                    </div>

                                    @if (!string.IsNullOrEmpty(elevKommentarBillede))
                                    {
                                        <div class="kommentar-billede-container right-align">
                                            <img src="@GetProfilbilledeSti(elevKommentarBillede)"
                                                 class="kommentar-billede"
                                                 @onclick="@(() => ÅbnStortBillede(elevKommentarBillede))"
                                                 style="cursor: zoom-in;" />

                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        else
                        {
                            <div class="kommentar-linje">
                                <div class="kommentar-felt">
                                    @if (!string.IsNullOrWhiteSpace(elevKommentar))
                                    {
                                        <p>@elevKommentar</p>
                                    }
                                    else
                                    {
                                        <p><em>Ingen elevkommentar endnu.</em></p>
                                    }
                                </div>

                                @if (!string.IsNullOrEmpty(elevKommentarBillede))
                                {
                                    <div class="kommentar-billede-container right-align">
                                        <img src="@GetProfilbilledeSti(elevKommentarBillede)"
                                             class="kommentar-billede"
                                             @onclick="@(() => ÅbnStortBillede(elevKommentarBillede))"
                                             style="cursor: zoom-in;" />
                                    </div>
                                }
                            </div>

                        }

                        <!-- Kokkens kommentar -->
                        <label class="mt-3"><strong>Kok og køkkenchef's kommentar</strong></label>

                        @if (!string.IsNullOrWhiteSpace(kokKommentarNavn) && kokKommentarDato != null)
                        {
                            <p class="kommentar-info">
                                <strong>Senest ændret
                                    af: @kokKommentarNavn</strong>, @kokKommentarDato?.ToString("dd.MM.yyyy"):
                            </p>
                        }
                        <!-- Kokkens kommentar -->
                        @if (loggedIn?.Rolle == "Køkkenchef" || loggedIn?.Rolle == "FaglærtKok")
                        {
                            <div class="kommentar-wrapper kommentar-kok">
                                <div class="kommentar-linje">
                                    <div class="kommentar-felt">
                                        <InputTextArea class="form-control kommentarbox" @bind-Value="kokKommentar" />
                                        <InputFile OnChange="OnBilledeValgtKok" accept="image/*" class="kommentar-upload" @key="aktivtDelmaalId" />
                                    </div>

                                    @if (!string.IsNullOrEmpty(kokKommentarBillede))
                                    {
                                        <div class="kommentar-billede-container right-align">
                                            <img src="@GetProfilbilledeSti(kokKommentarBillede)"
                                                 class="kommentar-billede"
                                                 @onclick="@(() => ÅbnStortBillede(kokKommentarBillede))"
                                                 style="cursor: zoom-in;" />

                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="kommentar-linje">
                                <div class="kommentar-felt">
                                    @if (!string.IsNullOrWhiteSpace(kokKommentar))
                                    {
                                        <p>@kokKommentar</p>
                                    }
                                    else
                                    {
                                        <p><em>Ingen kokkekommentar endnu.</em></p>
                                    }
                                </div>

                                @if (!string.IsNullOrEmpty(kokKommentarBillede))
                                {
                                    <div class="kommentar-billede-container right-align">
                                        <img src="@GetProfilbilledeSti(kokKommentarBillede)"
                                             class="kommentar-billede"
                                             @onclick="@(() => ÅbnStortBillede(kokKommentarBillede))"
                                             style="cursor: zoom-in;" />

                                    </div>
                                }
                            </div>

                        }

                        <button class="Gemkommentarknap" @onclick="GemKommentar">Gem kommentar</button>
                    </div>
                    @if (!string.IsNullOrEmpty(stortBilledeUrl))
                    {
                        <div class="lightbox-overlay" @onclick="LukLightbox">
                            <img src="@stortBilledeUrl" class="lightbox-img" />
                        </div>
                    }

                </ModalDialog>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(successMessage))
        {
            <BekræftelsesComponent Message="@successMessage" OnDismiss="@(() => successMessage = null)" />
        }


        <!-- Sidepanel med søgning og filtrering -->
        <div class="sidepanel">
            <div class="sidepanel-værktøj">
                <label for="soeg">Søg delmål</label>
                <input type="text" id="soeg" class="soeg-input" placeholder="Skriv søgeord..."
                       @bind-value="soegeord" @bind-value:event="oninput" @onkeypress="HandleKeyPress"/>

                <button class="soege-knap" @onclick="soegningknap">Søg</button>
            </div>

            <div class="sidepanel-værktøj">
                <label for="filter">Filtrer efter mål</label>
                <button class="filter-knap" @onclick="() => visFilter = !visFilter">
                    @(visFilter ? "Luk filter" : "Filtrer")
                </button>

                @if (visFilter)
                {
                    <div class="filter-boks-anim" style="margin-top: 1rem;">
                        <label>Mål</label>
                        <InputSelect class="form-control" @bind-value="ValgtMaalNavn" @oninput="OnChangeMaal">
                            <option value="">Alle mål</option>
                            @foreach (var m in aktivPeriode?.ListMaal ?? new())
                            {
                                <option value="@m.MaalNavn">@m.MaalNavn</option>
                            }
                        </InputSelect>

                        <label class="mt-2">Delmålstype</label>
                        <InputSelect class="form-control" @bind-value="ValgtDelmaalType" @oninput="OnChangeDelmaalType">
                            <option value="">Alle typer</option>
                            @foreach (var t in aktivPeriode?.ListMaal.SelectMany(m => m.ListDelmaal).Select(d => d.DelmaalType).Distinct() ?? new List<string>())
                            {
                                <option value="@t">@t</option>
                            }
                        </InputSelect>

                        <label class="mt-2">Status</label>
                        <InputSelect class="form-control" @bind-value="ValgtStatus" @oninput="OnChangeStatus">
                            <option value="">Alle</option>
                            <option value="true">Gennemført</option>
                            <option value="false">Ikke gennemført</option>
                        </InputSelect>
                    </div>
                }

            </div>
        </div>
    }
</div>


@code {

    // Den bruger der lige nu er logget ind (hentes fra LocalStorage via LoginService)
    private Bruger? loggedIn;

    // Den elevplan vi arbejder med (enten ens egen eller én man ser som HR/Køkkenchef)
    private Elevplan? minPlan;

    // Index til at vælge hvilken praktikperiode der vises (starter på 0 = første periode)
    private int valgtPeriodeIndex = 0;

    // Den praktikperiode vi har valgt – bruges til at hente mål og delmål der hører til perioden
    private Praktikperiode? aktivPeriode =>
        (minPlan?.ListPerioder != null && valgtPeriodeIndex >= 0 && valgtPeriodeIndex < minPlan.ListPerioder.Count)
            ? minPlan.ListPerioder[valgtPeriodeIndex]
            : null;

    //bruges til at hente elevens lokation, ud fra det ID der er i dens objekt
    private Lokation? valgtElevLokation;
    
    // Returnerer true hvis den loggede bruger er en elev, og de ser på en anden elevs elevplan (dvs. elevId er sat og forskellig fra ens egen).
    private bool isReadOnlyElevView => loggedIn?.Rolle == "Elev" && elevId != null && elevId != loggedIn._id;

    // Refererer til modal-dialogboksen der åbnes, når man klikker "Se kommentar"
    private ModalDialog? kommentarDialog;

    // ✍Disse to er bundet til tekstfelterne i modalen (elevens og kokkens kommentarer)
    private string elevKommentar = "";
    private string kokKommentar = "";

    // Navn og dato for hvem der har skrevet kommentarerne, samt billeder (vises i toppen af modal)
    private string? elevKommentarNavn;
    private DateOnly? elevKommentarDato;
    private string? kokKommentarNavn;
    private DateOnly? kokKommentarDato;
    private string? elevKommentarBillede;
    private string? kokKommentarBillede;


    // Bruges til at huske hvilket delmål vi redigerer kommentar til
    private int aktivtDelmaalId = 0;

    // Søge- og filterfelter til højresiden
    private List<Maal> filtreredeMaal = new(); // Indeholder mål og deres delmål efter filtrering
    private string soegeord = "";
    private string valgtMaalNavn = "";
    private string valgtDelmaalType = "";
    private bool? valgtStatus = null;
    private bool visFilter = false;

    // Det valgte mål ID fra dropdown
    private int valgtMaalIdTilDelmaal;

    // Hvis vi besøger siden med f.eks. elevId i URL’en, så læser vi det her
    [Parameter] public int? elevId { get; set; }

    // Den elev vi arbejder med (kan være én selv eller en anden)
    private Bruger? valgtElev;

    //Variable til vores opret/rediger delmål
    private ModalDialog? tilfoejDelmaalDialog;
    private Delmaal? delmaalTilRedigering = null;

    //Variable til vores vis opgaver funktionalitet
    private ModalDialog? opgaverDialog;
    private Delmaal? aktivtDelmaalTilOpgaver;
    private string? stortBilledeUrl;
    private string? successMessage;
    
    //Variable til vores rediger oplysninger
    private ModalDialog? skoleDialog;
    private List<Lokation> skoler = new();
    private int? valgtSkoleId;


    // 🟡 Kører hver gang der kommer parametre (fx ved skift af elevId i URL)
    protected override async Task OnParametersSetAsync()
    {
        // Henter den loggede bruger fra LoginService
        loggedIn = await lService.GetUserLoggedIn();

        if (loggedIn == null)
        {
            // Hvis ingen er logget ind, redirecter vi til login
            navManager.NavigateTo("login/elevplan");
            return;
        }

        // Hvis den loggede bruger er en elev, og forsøger at tilgå en anden elevs plan (dvs. elevId != ens egen)
        if (loggedIn.Rolle == "Elev" && elevId.HasValue && elevId.Value != loggedIn._id)
        {
            // Hent alle brugere, og find den elev der svarer til elevId fra URL’en - og find dens lokation
            valgtElev = await bService.HentAlle().ContinueWith(t => t.Result.FirstOrDefault(e => e._id == elevId.Value));

            if (valgtElev?.AfdelingId != null)
            {
                valgtElevLokation = await loService.HentLokationViaId(valgtElev.AfdelingId.Value);
            }

            // Hvis eleven ikke findes, eller ikke er på samme lokation som den loggede elev – nægt adgang
            if (valgtElev == null || valgtElev.AfdelingId != loggedIn.AfdelingId)
            {
                navManager.NavigateTo("/dashboard");
                return;
            }

        }

        // Hvis HR/Admin/Køkkenchef ser en specifik elevplan
        if (elevId.HasValue && elevId != loggedIn._id)
        {
            var alleElever = await lService.HentEleverTilElevplanVisning();
            valgtElev = alleElever.FirstOrDefault(e => e._id == elevId.Value);

            if (valgtElev != null)
            {
                minPlan = valgtElev.MinElevplan;
            }
            else
            {
                navManager.NavigateTo("/dashboard");
                return;
            }
        }
        else
        {
            // 👤 Hvis det er elev eller faglært kok, der kigger på sin egen plan
            valgtElev = loggedIn;
            minPlan = loggedIn.MinElevplan;
        }

        //Henter elevplan for den pågældene elev
        minPlan = await bService.HentElevplanForBruger(valgtElev._id, loggedIn._id);
        skoler = await loService.HentSkoleLokationer();

        // Tjek om der blev fundet en elevplan
        if (minPlan == null)
        {
            Console.WriteLine($"Ingen elevplan fundet for brugerId {valgtElev._id}");
            return;
        }
        
        if (valgtElev?.AfdelingId != null && valgtElevLokation == null)
        {
            valgtElevLokation = await loService.HentLokationViaId(valgtElev.AfdelingId.Value);
        }

        if (valgtPeriodeIndex >= minPlan.ListPerioder.Count)
        {
            valgtPeriodeIndex = 0;
        }

        await OpdaterFiltreredeMaal();
    }
    
    private async Task AabenRedigerSkole()
    {
        skoler = await loService.HentSkoleLokationer();
        valgtSkoleId = aktivPeriode?.SkoleId;
        skoleDialog?.Open();
    }

    private async Task GemSkolevalg()
    {
        if (valgtElev == null)
            return;

        // Sæt SkoleId til null hvis brugeren ikke har valgt noget (dropdown value == "")
        if (aktivPeriode != null)
        {
            aktivPeriode.SkoleId = valgtSkoleId == 0 ? null : valgtSkoleId;
        }


        await bService.OpdaterBruger(valgtElev);

        skoleDialog?.Close();
        StateHasChanged();
    }
    
    private string valgtSkoleIdAsString
    {
        get => valgtSkoleId?.ToString() ?? "0"; // hvis null => "0"
        set
        {
            if (int.TryParse(value, out int id) && id != 0)
                valgtSkoleId = id;
            else
                valgtSkoleId = null;
        }
    }

    private Task OnChangedSkoleValgt(ChangeEventArgs e)
    {
        valgtSkoleIdAsString = e.Value?.ToString() ?? "0";
        return Task.CompletedTask;
    }


    // Tæller hvor mange delmål der findes i den valgte periode
    private int AntalDelmaalIAlt()
    {
        if (aktivPeriode == null)
            return 0;

        int antal = 0;
        foreach (var mål in aktivPeriode.ListMaal)
        {
            antal += mål.ListDelmaal.Count;
        }

        return antal;
    }

    // Tæller hvor mange af delmålene i perioden der er gennemført
    private int AntalDelmaalOpnaaet()
    {
        if (aktivPeriode == null)
            return 0;

        int opnaaet = 0;
        foreach (var mål in aktivPeriode.ListMaal)
        {
            foreach (var delmål in mål.ListDelmaal)
            {
                if (delmål.Status)
                    opnaaet++;
            }
        }

        return opnaaet;
    }

    // Kaldes når man klikker "Se kommentar" – viser kommentarer for det valgte delmål
    private async Task AabenKommentar(int delmaalId)
    {
        if (isReadOnlyElevView)
            return;

        aktivtDelmaalId = delmaalId;

        // Nulstiller tidligere kommentarer fra modal
        elevKommentar = kokKommentar = "";
        elevKommentarNavn = kokKommentarNavn = null;
        elevKommentarDato = kokKommentarDato = null;
        elevKommentarBillede = null;
        kokKommentarBillede = null;

        if (minPlan != null)
        {
            // Henter elevens kommentar til delmålet via IElevplanService
            var _elevKommentar = await eService.GetKommentarAsync(minPlan._id, delmaalId, "Elev");
            if (_elevKommentar != null)
            {
                elevKommentar = _elevKommentar.Tekst;
                elevKommentarNavn = _elevKommentar.OprettetAfNavn;
                elevKommentarDato = _elevKommentar.Dato;
                elevKommentarBillede = _elevKommentar.KommentarBillede;
            }

            // Henter køkkenchefens/kokkens kommentar på samme måde
            var _kokKommentar = await eService.GetKommentarAsync(minPlan._id, delmaalId, "FaglærtKok");
            if (_kokKommentar != null)
            {
                kokKommentar = _kokKommentar.Tekst;
                kokKommentarNavn = _kokKommentar.OprettetAfNavn;
                kokKommentarDato = _kokKommentar.Dato;
                kokKommentarBillede = _kokKommentar.KommentarBillede;
            }
        }

        kommentarDialog?.Open(); // åbner modal
    }

    // Gemmer kommentar (enten elevens eller køkkenchefens/kokkens)
    private async Task GemKommentar()
    {
        if (minPlan == null || loggedIn == null)
            return;

        if (loggedIn.Rolle == "Elev")
        {
            var eksisterende = await eService.GetKommentarAsync(minPlan._id, aktivtDelmaalId, "Elev");

            if (eksisterende != null)
            {
                //Opdaterer kommentaren, og kalder redigerkommentar med den nye "eksisterende"
                eksisterende.Tekst = elevKommentar;
                eksisterende.KommentarBillede = elevKommentarBillede;
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende);
            }
            else if (!string.IsNullOrWhiteSpace(elevKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAfNavn = loggedIn?.Navn,
                    OprettetAfRolle = loggedIn?.Rolle,
                    Tekst = elevKommentar,
                    KommentarBillede = elevKommentarBillede
                };
                // Kalder TilfoejKommentar i IElevplanService
                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }
        else if (loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "FaglærtKok")
        {
            var eksisterende = await eService.GetKommentarAsync(minPlan._id, aktivtDelmaalId, "FaglærtKok");
            ;

            if (eksisterende != null)
            {
                eksisterende.Tekst = kokKommentar;
                eksisterende.KommentarBillede = kokKommentarBillede;
                await eService.RedigerKommentar(minPlan, aktivtDelmaalId, eksisterende);
            }
            else if (!string.IsNullOrWhiteSpace(kokKommentar))
            {
                var kommentar = new Kommentar
                {
                    OprettetAfNavn = loggedIn.Navn,
                    OprettetAfRolle = loggedIn.Rolle,
                    Tekst = kokKommentar,
                    KommentarBillede = kokKommentarBillede
                };
                await eService.TilfoejKommentar(minPlan, aktivtDelmaalId, kommentar);
            }
        }

        kommentarDialog?.Close(); // Lukker modalen efter gem
        // TODO: Giv bruger feedback på om det lykkedes eller fejlede
    }

    private async Task OnBilledeValgtElev(InputFileChangeEventArgs e)
    {
        elevKommentarBillede = await UploadKommentarBilledeAsync(e.File, "Elev");
    }

    private async Task OnBilledeValgtKok(InputFileChangeEventArgs e)
    {
        kokKommentarBillede = await UploadKommentarBilledeAsync(e.File, "FaglærtKok");
    }



    //Funktion der bruges til at ændre status på et delmaal
    private async Task ToggleStatus(Delmaal delmaal)
    {
        //Tjekker om den som er logget ind har rettighederne
        if (loggedIn == null || !(loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "FaglærtKok" || loggedIn.Rolle == "Admin"))
            return;

        //ændrer status på delmålet, og gemmer det i loggen
        delmaal.Status = !delmaal.Status;

        if (delmaal.Status)
        {
            delmaal.StatusLog = $"Gennemført af {loggedIn.Navn} d. {DateTime.Now:dd/MM-yyyy}";
        }

        try
        {
            await eService.OpdaterStatus(minPlan, delmaal);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ToggleStatus] FEJL: {ex.Message}");
        }

        StateHasChanged();
    }

    private void ToggleOpgaveStatus(Opgaver opgave)
    {
        if (loggedIn == null || aktivtDelmaalTilOpgaver == null)
            return;

        opgave.OpgaveGennemfoert = !opgave.OpgaveGennemfoert;

        if (opgave.OpgaveGennemfoert)
        {
            opgave.StatusLogOpgave = $"Gennemført af {loggedIn.Navn} d. {DateTime.Now:dd/MM-yyyy}";
        }
        else
        {
            opgave.StatusLogOpgave = null;
        }

        // Evaluer om ALLE opgaver er gennemført
        bool alleGennemfoert = aktivtDelmaalTilOpgaver.ListOpgaver.All(o => o.OpgaveGennemfoert);
        aktivtDelmaalTilOpgaver.Status = alleGennemfoert;

        if (alleGennemfoert)
        {
            aktivtDelmaalTilOpgaver.StatusLog = $"Delmål automatisk markeret som gennemført d. {DateTime.Now:dd/MM-yyyy} af {loggedIn.Navn}";
        }
        else
        {
            aktivtDelmaalTilOpgaver.StatusLog = null; // valgfrit – eller behold tidligere log
        }
    }




    private async Task soegningknap()
    {
        Console.WriteLine($"Søger på: {soegeord}");
        await OpdaterFiltreredeMaal();
    }

    // Aktiverer søgning når ENTER trykkes
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await soegningknap();
        }
    }

    //Håndterer valg af periode og sætter index der bruges til at hente de filtrerede mål
    private async Task SkiftPeriode(int index)
    {
        valgtPeriodeIndex = index;
        await OpdaterFiltreredeMaal();
    }

    private async Task OpdaterFiltreredeMaal()
    {
        if (valgtElev == null)
            return;

        filtreredeMaal = await eService.HentFiltreredeMaal(
            valgtElev._id,
            valgtPeriodeIndex,
            valgtMaalNavn,
            valgtDelmaalType,
            soegeord,
            valgtStatus);
        StateHasChanged(); // Opdater UI
    }

    // Gemmer det valgte mål-navn fra dropdown
    private string ValgtMaalNavn
    {
        get => valgtMaalNavn;
        set
        {
            valgtMaalNavn = value;

            // Hver gang bruger vælger et nyt mål, opdateres listen af mål og delmål
            _ = OpdaterFiltreredeMaal();
        }
    }

    // Når et mål vælges i dropdown
    private async Task OnChangeMaal(ChangeEventArgs e)
    {
        valgtMaalNavn = e.Value?.ToString() ?? "";
        Console.WriteLine($"Mål valgt: {valgtMaalNavn}");

        await OpdaterFiltreredeMaal(); // Kalder backend for at hente nye mål
    }

    // Gemmer den valgte delmålstype fra dropdown
    private string ValgtDelmaalType
    {
        get => valgtDelmaalType;
        set
        {
            valgtDelmaalType = value;

            // Hver gang bruger vælger en ny type, opdateres listen
            _ = OpdaterFiltreredeMaal();
        }
    }

    // Når en delmålstype vælges
    private async Task OnChangeDelmaalType(ChangeEventArgs e)
    {
        valgtDelmaalType = e.Value?.ToString() ?? "";
        Console.WriteLine($"Delmålstype valgt: {valgtDelmaalType}");

        await OpdaterFiltreredeMaal(); // Kalder backend for at hente nye mål
    }

    private string ValgtStatus
    {
        get
        {
            if (valgtStatus == true) return "true";
            if (valgtStatus == false) return "false";
            return ""; // "Alle"
        }
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                valgtStatus = null;
            else if (value == "true")
                valgtStatus = true;
            else if (value == "false")
                valgtStatus = false;

            _ = OpdaterFiltreredeMaal();
        }
    }


    // Kaldes når bruger ændrer status-filteret (gennemført/ikke gennemført)
    private async Task OnChangeStatus(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(value))
        {
            valgtStatus = null;
        }
        else if (value.Equals("true", StringComparison.OrdinalIgnoreCase))
        {
            valgtStatus = true;
        }
        else if (value.Equals("false", StringComparison.OrdinalIgnoreCase))
        {
            valgtStatus = false;
        }

        Console.WriteLine($"Status valgt: {valgtStatus}");

        await OpdaterFiltreredeMaal();
    }

    //bruges til at åbne tilføj modal dialog
    private void AabenTilfoejDelmaal()
    {
        delmaalTilRedigering = null;
        tilfoejDelmaalDialog?.Open();
    }

    //bruges til at åbne modal dialog med redigering
    private async Task AabenRedigerDelmaal(Delmaal valgtDelmaal)
    {
        delmaalTilRedigering = valgtDelmaal;

        // Vent på at komponenten opdager RedigerDelmaal
        await InvokeAsync(StateHasChanged);

        tilfoejDelmaalDialog?.Open();
    }
    
    private async Task SletDelmaal(Elevplan plan, int periodeIndex, int maalId, int delmaalId)
    {
        try
        {
            await eService.SletDelmaal(plan, periodeIndex, maalId, delmaalId);
            await OpdaterFiltreredeMaal(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Elevplan.razor] FEJL ved sletning af delmål: {ex.Message}");
        }
    }

    //bruges til at åbne opgavevisningen
    private void AabenOpgaver(Delmaal delmaal)
    {
        aktivtDelmaalTilOpgaver = delmaal;
        opgaverDialog?.Open();
    }

    private async Task GemOpgaver()
    {
        if (minPlan == null || aktivtDelmaalTilOpgaver == null || aktivPeriode == null)
            return;

        var maal = aktivPeriode.ListMaal
            .FirstOrDefault(m => m.ListDelmaal.Any(d => d._id == aktivtDelmaalTilOpgaver._id));

        if (maal == null) return;

        await eService.OpdaterDelmaal(minPlan, valgtPeriodeIndex, maal._id, aktivtDelmaalTilOpgaver);
        opgaverDialog?.Close();
    }

    private async Task ToggleIgangStatus(Delmaal d)
    {
        if (d.Status) return; // gennemførte må ikke toggles

        d.Igang = !d.Igang;
        await eService.OpdaterIgang(minPlan, d);
    }

    private string GetProfilbilledeSti(string? sti)
    {
        if (string.IsNullOrEmpty(sti) || sti == "billeder/intetprofilbillede.jpg")
            return "/billeder/intetprofilbillede.jpg"; // hentes fra frontendens wwwroot

        return $"http://localhost:5237/{sti.TrimStart('/')}"; // hentes fra backendens wwwroot
    }
    private async Task<string> UploadKommentarBilledeAsync(IBrowserFile file, string rolle)
    {
        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024));
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

        content.Add(fileContent, "file", file.Name);

        // Eksempel: api/elevplan/upload-kommentarbillede?rolle=Elev
        var response = await http.PostAsync($"api/elevplan/upload-kommentarbillede?rolle={rolle}", content);

        if (response.IsSuccessStatusCode)
        {
            var path = await response.Content.ReadAsStringAsync();
            return path.Replace("\"", "");
        }

        return "";
    }

    private void ÅbnStortBillede(string? sti)
    {
        stortBilledeUrl = GetProfilbilledeSti(sti);
    }

    private void LukLightbox()
    {
        stortBilledeUrl = null;
    }
    
    private int BeregnDageTilbage()
    {
        var idag = DateOnly.FromDateTime(DateTime.Today);
        var slut = aktivPeriode?.SlutDato;

        if (slut == null || idag > slut)
        {
            return 0;
        }

        var dage = slut.Value.DayNumber - idag.DayNumber;

        return dage;
    }



}