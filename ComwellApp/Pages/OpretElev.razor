@page "/opretelev"
@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using Shared
@inject IBrugereService bService
@inject ILoginService LoginService
@inject NavigationManager Navigation

<EditForm Model="@nyElev" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
  
    <div class="opret-container">
        <!-- Tilbage-knap til dashboard -->
        <button class="tilbage-knap" @onclick="Tilbage">← Tilbage</button>

        <h3 class="overskrift">Oprettelse af elev</h3>

        <div class="opret-grid">
            <!-- Inputfelter for navn og telefonnummer -->
            <div class="form-row">
                <div class="form-floating-group halv-bredde">
                    <InputText id="navn" class="form-control floating-input" @bind-Value="nyElev.Navn" placeholder=" " />
                    <label for="navn">Fulde navn</label>
                    <ValidationMessage For="@(() => nyElev.Navn)" />
                </div>

                <div class="form-floating-group halv-bredde">
                    <InputText id="telefonnr" class="form-control floating-input" @bind-Value="nyElev.BrugerTelefon" placeholder=" " />
                    <label for="telefonnr">Telefon nr</label>
                    <ValidationMessage For="@(() => nyElev.BrugerTelefon)" />
                </div>
            </div>

            <!-- Inputfelt til e-mail -->
            <div class="form-floating-group hel-bredde">
                <InputText id="email" type="email" class="form-control floating-input" @bind-Value="nyElev.Email" placeholder=" " />
                <label for="email">E-mail</label>
                <ValidationMessage For="@(() => nyElev.Email)" />
            </div>

            <!-- Adgangskode til eleven -->
            <div class="form-floating-group hel-bredde">
                <InputText id="adgangskode" class="form-control floating-input" @bind-Value="nyElev.Adgangskode" placeholder=" " />
                <label for="adgangskode">Adgangskode</label>
                <ValidationMessage For="@(() => nyElev.Adgangskode)" />
            </div>

            <!-- Vælg køkken, startdato og upload billede -->
            <div class="form-row">
                <div class="form-floating-group tre-delt">
                    <select class="form-control" @bind="valgtKoekkenId">
                        <option disabled selected value="">Vælg køkken</option>
                        @foreach (var k in alleKoekkener)
                        {
                            <option value="@k.LokationId">@k.LokationNavn</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => valgtKoekkenId)" />
                </div>

                <div class="form-floating-group tre-delt">
                    <InputDate id="startdato" class="form-control" @bind-Value="nyElev.StartDato" />
                    <label for="startdato"></label>
                    <ValidationMessage For="@(() => nyElev.StartDato)" />
                </div>

                <div class="form-floating-group tre-delt">
                    <label for="billede" class="input-label">Upload billede</label>
                    <InputFile id="billede" class="form-control" OnChange="HandleFileSelected" />
                </div>
            </div>
            <div class="form-row">
                <div class="form-floating-group halv-bredde">
                    <select id="ansvarlig" class="form-control" @bind="valgtKoekkenchefId">
                        <option disabled selected value="">Vælg ansvarlig køkkenchef</option>
                        @foreach (var k in koekenchefer)
                        {
                            <option value="@k.BrugerId">@k.Navn</option>
                        }
                    </select>
                </div>
                <div class="form-floating-group halv-bredde">
                    <select class="form-control" @bind="nyElev.Erhverv">
                        <option disabled selected value="">Vælg uddannelse</option>
                        <option value="Kok">Kok</option>
                    </select>
                    <ValidationMessage For="@(() => nyElev.Erhverv)" />
                </div>
            </div>
            <!-- Knap til at gemme/indsende -->
            <div class="form-floating-group opret-knap-container">
                <button class="btn btn-primary" type="submit">Opret</button>
            </div>
        </div>

        <p class="note-tekst">Ved oprettelse af ny elev oprettes der automatisk en ny elevplan</p>
    </div>
</EditForm>

@code {
    private int? valgtKoekkenId;
    private int? valgtKoekkenchefId;

    private List<Bruger> koekenchefer = new();           // Alle køkkenchefer (fra backend)
    private List<Lokation> alleKoekkener = new();        // Alle unikke lokationer (fra backend)

    private IBrowserFile? BilledeFil;

    private Bruger nyElev = new()
    {
        StartDato = DateOnly.FromDateTime(DateTime.Today)
    };

    protected override async Task OnInitializedAsync()
    {
        // Hent køkkenchefer og lokationer fra backend
        koekenchefer = await bService.HentAlleKøkkenchefer();
        alleKoekkener = (await bService.HentAlleLokationer())
                        .OrderBy(l => l.LokationNavn)
                        .ToList();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        BilledeFil = e.File;
    } 

    private void Tilbage()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("Forsøger at oprette elev...");

        // Profilbillede upload
        if (BilledeFil != null)
        {
            using var stream = BilledeFil.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            nyElev.Billede = $"data:{BilledeFil.ContentType};base64,{Convert.ToBase64String(bytes)}";
        }
        else
        {
            nyElev.Billede = "billeder/intetprofilbillede.jpg";
        }

        // Rolle og lokation
        nyElev.Rolle = "Elev";
        nyElev.Afdeling = alleKoekkener.FirstOrDefault(k => k.LokationId == valgtKoekkenId);

        var ansvarlig = koekenchefer.FirstOrDefault(k => k.BrugerId == valgtKoekkenchefId);

        if (ansvarlig == null)
        {
            Console.WriteLine("Der er ikke valgt en ansvarlig køkkenchef.");
            return;
        }

        // Vælg skabelon baseret på erhverv
        string skabelonNavn = nyElev.Erhverv switch
        {
            "Kok" => "KokSkabelon",
            _ => throw new Exception("Ukendt erhverv – kan ikke vælge skabelon")
        };

        // Send til backend
        await bService.TilfoejElev(nyElev, ansvarlig, skabelonNavn);
        
        Console.WriteLine("Elev oprettet – omdirigering...");
        Navigation.NavigateTo("/dashboard");
    }
}
