@page "/dashboard" 


@inject NavigationManager navManager
@inject ILoginService lService
@inject IBrugereService bService

@using ComwellApp.Services.Brugere
@using ComwellApp.Services.Login
@using Shared

<PageTitle>Dashboard</PageTitle> <!-- Vises i browserens faneblad -->

<!-- Header med overskrift, søg, filtrer og opret-knap -->
<div class="overskrift-knap-wrapper">
    <h1 class="overskrift">Elevoversigt</h1>

    <!-- Søgefelt + søgeknap -->
    <div style="display: flex; gap: 0.5rem; align-items: center;">
        <input type="text" id="soeg" class="soeg-input" placeholder="Skriv navn..." @bind-value="soegeord" @bind-value:event="oninput" @onkeypress="HandleKeyPress" />

        <button class="soege-knap" @onclick="SoegningKnap">Søg</button>

        <button class="filter-knap" @onclick="() => visFilter = !visFilter">Filtrer</button>
    </div>
    
    <!-- Viser kun knappen "Opret elev", hvis den loggede bruger har en rolle der må -->
    @if (loggedIn is not null && (loggedIn.Rolle == "Admin" || loggedIn.Rolle == "HR"))
    {
        <button class="btn btn-primary opret-knap" @onclick="OnClickOpret">Opret elev</button>
    }
</div>

@if (visFilter)
{
    <div class="filter-box" style="margin-top: 1rem; border: 1px dashed #ccc; padding: 1rem; border-radius: 8px;">
        <div class="form-floating-group halv-bredde">
        <label>Lokation</label>
        <InputSelect class="form-control" @bind-Value="valgtLokation" />
        </div>

        <div class="form-floating-group halv-bredde">
        <label class="mt-2">Kursus</label>
        <InputSelect class="form-control" @bind-Value="valgtKursus" />
        </div>

        <div class="form-floating-group halv-bredde">
        <label class="mt-2">Erhverv</label>
        <InputSelect class="form-control" @bind-Value="valgtErhverv" />
        </div>

        <div class="form-floating-group halv-bredde">
        <label class="mt-2">Deadline (antal dage til)</label>
        <InputDate class="form-control" @bind-Value="valgtDeadlineDage" />
        </div>

        <button class="soege-knap mt-3" @onclick="OpdaterFiltreredeElever">Anvend filter</button>
    </div>
}

<!-- Her vises alle elever som kort -->
<div class="elevkort-container">
    @if (elever == null || !elever.Any())
    {
        <p>Ingen elever fundet...</p>
    }
    else
    {
        @foreach (var elev in elever)
        {
            // Vi beregner hvor mange delmål eleven har opnået
            var (opnaaet, iAlt) = BeregnFremgang(elev);
            double procent = iAlt > 0 ? (double)opnaaet / iAlt * 100 : 0;
            int procentInt = (int)Math.Round(procent);

            // Gradient til statusbaren
            string gradient = "linear-gradient(to right, #e4a1a1 0%, #e4bfa1 33%, #e4d6a1 66%, #6fa96f 100%)";

            <div class="item-card">
                <div class="item-grid">
                    <!-- Venstre kolonne med navn og kontakt -->
                    <div class="item-left">
                        <h5>@elev.Navn</h5>
                        <p>Telefon: @elev.BrugerTelefon</p>
                        <p>Køkkenchef: @elev.MinElevplan?.Ansvarlig?.Navn</p>
                        <p>Elev siden: @elev.StartDato?.ToString("dd-MM-yyyy")</p>
                    </div>

                    <!-- Midterkolonne med fremgang -->
                    <div class="item-center">
                        <p>Lokation: @elev.Afdeling?.LokationNavn</p>
                        <p>Delmål opnået: @opnaaet / @iAlt</p>
                        <div class="statusbar-outer">
                            <div class="statusbar-inner" style="background: @gradient; clip-path: inset(0 calc(100% - @procentInt%) 0 0);"></div>
                        </div>
                    </div>

                    <!-- Højre kolonne med billede -->
                    <div class="item-right">
                        <img src="@elev.Billede" alt="Profilbillede" />
                    </div>
                </div>

                <!-- Knappen til at gå til elevens elevplan -->
                @if (
                    // Vises hvis man er sig selv (elev/kok) eller har en overordnet rolle
                    (loggedIn.BrugerId == elev.BrugerId && (loggedIn.Rolle == "Elev")) ||
                    (loggedIn?.Rolle == "Admin" || loggedIn.Rolle == "Køkkenchef" || loggedIn.Rolle == "HR" || loggedIn.Rolle == "FaglærtKok")
                )
                {
                    <button class="btn btn-outline-secondary se-elevplan-knap" @onclick="@(() => GåTilElevplan(elev.BrugerId))">
                        Se elevplan
                    </button>
                }
            </div>
        }
    }
</div>
@code {
    // Den bruger der er logget ind i systemet
    private Bruger? loggedIn;

    // Liste over alle elever fra databasen (brugt til filtrering)
    private List<Bruger> alleElever = new();

    // Den liste vi viser på siden (kan være filtreret udgave af alleElever)
    private List<Bruger> elever = new();
    
    private string soegeord = "";
    private string valgtLokation = "";
    private string valgtKursus = "";
    private string valgtErhverv = "";
    private int? valgtDeadlineDage = null;
    private bool visFilter = false;

    // Når siden loades (komponent initialiseres), henter vi data
    protected override async Task OnInitializedAsync()
    {
        loggedIn = await lService.GetUserLoggedIn(); // hentes fra LocalStorage via LoginService

        if (loggedIn == null)
        {
            // Hvis man ikke er logget ind, sendes man til login
            navManager.NavigateTo("login/dashboard");
            return;
        }

        // Hent alle elever via IBrugereService (sender kald til backend)
        alleElever = await bService.HentAlle();

        FiltrerElever(); // sortér elever baseret på rolle/lokation
    }

    //  elever: fx kun dem med samme lokation som brugeren – hvis rollen kræver det
    private void FiltrerElever()
    {
        if (loggedIn == null) return;

        // For elev, faglært kok og køkkenchef vises kun elever fra samme lokation
        if (loggedIn.Rolle == "Elev" || loggedIn.Rolle == "FaglærtKok" || loggedIn.Rolle == "Køkkenchef")
        {
            elever = alleElever
                .Where(e => e.Afdeling?.LokationNavn == loggedIn.Afdeling?.LokationNavn)
                .ToList();
        }
        else
        {
            // HR og Admin ser alle
            elever = alleElever;
        }
    }

    // Navigerer til opret-elev siden, når man trykker "Opret elev"
    private void OnClickOpret()
    {
        navManager.NavigateTo("opretelev");
    }

    // Navigerer til den specifikke elevs elevplan
    private void GåTilElevplan(int elevId)
    {
        navManager.NavigateTo($"elevplan/{elevId}");
    }

    // Beregner hvor mange delmål en elev har opnået i alt (på tværs af ALLE praktikperioder)
    private (int opnaaet, int iAlt) BeregnFremgang(Bruger elev)
    {
        if (elev?.MinElevplan?.ListPerioder == null)
            return (0, 0); // Hvis elevplan ikke er sat, er der ikke noget at vise

        int total = 0;
        int opnaaet = 0;

        foreach (var periode in elev.MinElevplan.ListPerioder)
        {
            foreach (var maal in periode.ListMaal)
            {
                total += maal.ListDelmaal.Count;
                opnaaet += maal.ListDelmaal.Count(d => d.Status);
            }
        }

        return (opnaaet, total); // Returnerer både opnåede og samlede mål
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SoegningKnap();
        }
    }

    private async Task SoegningKnap()
    {
        await OpdaterFiltreredeElever();
    }

    private async Task OpdaterFiltreredeElever()
    {
        elever = await bService.HentFiltreredeElever(
            soegeord,
            valgtLokation,
            valgtKursus,
            valgtErhverv,
            valgtDeadlineDage);

        StateHasChanged();
    }
}
