@using Shared
<div class="delmaal-container">
    @foreach (var delmaal in maal.ListDelmaal)
    {
        <div class="delmaal">

            <h4 class="delmaal-overskrift">@delmaal.Titel</h4>
            <p>Beskrivelse: @delmaal.Beskrivelse</p>
            <p>Type: @delmaal.DelmaalType</p>
            <p>Ansvarlig: @delmaal.Ansvarlig</p>
            <p>
                Deadline: @(delmaal.Deadline != null
                                  ? delmaal.Deadline?.ToString("dd/MM-yyyy")
                                  : delmaal.DeadlineKommentar)
            </p>

            @if (delmaal.ListOpgaver != null && delmaal.ListOpgaver.Any())
            {
                <p>Opgaver:
                    <button class="kommentar-knap" @onclick="() => OnVisOpgaver.InvokeAsync(delmaal)">Åbn opgaver</button>
                </p>
            }

            <p>Kommentar:
                <button class="kommentar-knap" @onclick="() => OnInputDelmaal.InvokeAsync(delmaal.DelmaalId)">Se kommentar</button>
            </p>

            @if (delmaal.Status && !string.IsNullOrWhiteSpace(delmaal.StatusLog))
            {
                <p class="status-log">@delmaal.StatusLog</p>
            }

            <div class="status-knapper">
                @if (!delmaal.Status && BrugerRolle != "HR")
                {
                    <div class="status-badge @(delmaal.Igang ? "igang" : "ikke-igang")"
                         @onclick="() => OnToggleIgang.InvokeAsync(delmaal)">
                        @(delmaal.Igang ? "Igangværende" : "Ikke igang")
                    </div>
                }
                <div class="status-badge @(delmaal.Status ? "gennemført" : "ikke-gennemført")"
                     @onclick="() => OnToggleStatus.InvokeAsync(delmaal)">
                    @(delmaal.Status ? "Gennemført" : "Ikke gennemført")
                </div>


            </div>

            @if (BrugerRolle == "Køkkenchef" || BrugerRolle == "Admin")
            {
                <div>
                    <button class="rediger-knap" @onclick="() => OnRedigerDelmaal.InvokeAsync(delmaal)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                             class="bi bi-pencil" viewBox="0 0 16 16">
                            <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 
                         10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 
                         0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 
                         12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 
                         0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 
                         5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 
                         0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 
                         0 1-.468-.325"/>
                        </svg>
                    </button>
                </div>
            }
        </div>
    }
</div>
@code {
    [Parameter] public required Maal maal { get; set; }
    
    //Sender det valgte delmåls ID tilbage til parent komponenten (Elevplan side), så vi kan bruge åbenKommentar
    [Parameter] public required EventCallback<int> OnInputDelmaal { get; set; }
    
    //Samme som ovenfor, men så vi kan bruge ToggleStatus for hvert delmål
    [Parameter] public EventCallback<Delmaal> OnToggleStatus { get; set; }
    
    //Bruges til vis opgaver knappen
    [Parameter] public EventCallback<Delmaal> OnVisOpgaver { get; set; }
    
    //Bruges til at håndtere visningen af redigerknap
    [Parameter] public string? BrugerRolle { get; set; }

    //Bruges til at sende delmålet til parent komponenten, så vi kan redigere i det
    [Parameter] public EventCallback<Delmaal> OnRedigerDelmaal { get; set; }

    [Parameter] public EventCallback<Delmaal> OnToggleIgang { get; set; }
}
