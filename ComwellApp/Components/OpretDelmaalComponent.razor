@using ComwellApp.Services.Elevplan
@using Shared
@inject IElevplanService eService

<EditForm Model="nytDelmaal" OnValidSubmit="GemDelmaal">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="modal-form">
        <h5 class="mb-3">@((isEditMode ? "Rediger delm√•l" : "Opret nyt delm√•l"))</h5>

        @if (!isEditMode)
        {
            <!-- Praktikperiodevalg (kun ved opret) -->
            <div class="form-floating-group">
                <select class="form-control floating-input" @onchange="OnPeriodeChanged">
                    <option value="-1" disabled selected hidden>-- V√¶lg periode --</option>
                    @for (int i = 0; i < minPlan?.ListPerioder.Count; i++)
                    {
                        <option value="@i">Periode @(i + 1)</option>
                    }
                </select>
                <label>V√¶lg praktikperiode</label>
            </div>

            <!-- M√•lvalg (kun ved opret) -->
            @if (valgtPeriodeIndex >= 0)
            {
                <div class="form-floating-group">
                    <select class="form-control floating-input" @bind="valgtMaalId">
                        <option value="0" disabled selected hidden>-- V√¶lg m√•l --</option>
                        @foreach (var maal in maalTilValgtPeriode)
                        {
                            <option value="@maal._id">@maal.MaalNavn</option>
                        }
                    </select>
                    <label>V√¶lg m√•l</label>
                </div>
            }
        }
        else
        {
            <!-- Vist som tekst ved redigering -->
            <div class="form-floating-group">
                <p><strong>Periode:</strong> Periode @(valgtPeriodeIndex + 1)</p>
                <p><strong>M√•l:</strong> @maalTilValgtPeriode.FirstOrDefault(m => m._id == valgtMaalId)?.MaalNavn</p>
            </div>
        }

        <!-- √òvrige felter (f√¶lles for opret og rediger) -->
        <div class="form-floating-group">
            <select class="form-control floating-input" @bind="nytDelmaal.DelmaalType">
                <option value="" disabled selected hidden>-- V√¶lg type --</option>
                @foreach (var type in unikkeDelmaalTyper)
                {
                    <option value="@type">@type</option>
                }
            </select>
            <label>Type</label>
            <ValidationMessage For="@(() => nytDelmaal.DelmaalType)"/>
        </div>

        <div class="form-floating-group">
            <InputText class="form-control floating-input" @bind-Value="nytDelmaal.Titel" placeholder=" "/>
            <label>Titel</label>
            <ValidationMessage For="@(() => nytDelmaal.Titel)"/>
        </div>

        <div class="form-floating-group">
            <InputTextArea class="form-control floating-input" @bind-Value="nytDelmaal.Beskrivelse" placeholder=" " />
            <label>Beskrivelse</label>
            <ValidationMessage For="@(() => nytDelmaal.Beskrivelse)"/>
        </div>

        <div class="form-floating-group">
            <InputText class="form-control floating-input" @bind-Value="nytDelmaal.Ansvarlig" placeholder=" " />
            <label>Ansvarlig - fx. "n√¶rmeste leder"</label>
            <ValidationMessage For="@(() => nytDelmaal.Ansvarlig)"/>
        </div>

        <div class="form-floating-group">
            <InputDate class="form-control floating-input"
                       @bind-Value="nytDelmaal.Deadline"
                       disabled="@(!string.IsNullOrWhiteSpace(nytDelmaal.DeadlineKommentar))"/>
            <label>Deadline</label>
        </div>

        <div class="form-floating-group">
            <InputText class="form-control floating-input"
                       placeholder=" "
                       @bind-Value="nytDelmaal.DeadlineKommentar"
                       disabled="@(nytDelmaal.Deadline.HasValue)"/>
            <label>Kommentar til deadline</label>
        </div>

        <h5 class="mt-3">Opgaver</h5>
        @foreach (var opgave in nytDelmaal.ListOpgaver)
        {
            <div class="opgave-wrapper">
                <div class="form-floating-group">
                    <InputText class="form-control floating-input" @bind-Value="opgave.OpgaveNavn" placeholder=" " />
                    <label>Opgave navn</label>
                </div>
                <div class="form-floating-group">
                    <InputText class="form-control floating-input" @bind-Value="opgave.OpgaveDetaljer" placeholder=" " />
                    <label>Opgave detaljer</label>
                </div>
                <button type="button" class="fjern-opgave" @onclick="() => FjernOpgave(opgave)">Fjern</button>
            </div>
        }
        <button type="button" class="tilf√∏j-opgaver" @onclick="TilfoejOpgave">Tilf√∏j ny opgave</button>

        <div class="gemdelmaal-knap-container">
            <button type="submit" class="Gemdelmaalknap">
                @(isEditMode ? "Gem √¶ndringer" : "Opret delm√•l")
            </button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public Elevplan? minPlan { get; set; }
    [Parameter] public Delmaal? RedigerDelmaal { get; set; }
    [Parameter] public EventCallback OnGemSuccess { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<string> OnSuccessMessage { get; set; }


    private Delmaal nytDelmaal = new();
    private bool isEditMode => RedigerDelmaal != null;
    private int valgtPeriodeIndex = -1;
    private int valgtMaalId = 0;

    private List<Maal> maalTilValgtPeriode = new();
    private List<string> unikkeDelmaalTyper = new();
    
    protected override async void OnParametersSet()
    {
        Console.WriteLine("üîÑ OnParametersSet kaldt med DelmaalId: " + RedigerDelmaal?._id);
        
        if (RedigerDelmaal == null)
        {
            valgtPeriodeIndex = -1;
            valgtMaalId = 0;
            nytDelmaal = new Delmaal(); 
            maalTilValgtPeriode = new();
            unikkeDelmaalTyper = new();
            await HentMaalOgTyper(); 
            return; 
        }

        if (RedigerDelmaal != null && minPlan?.ListPerioder != null)
        {
            for (int i = 0; i < minPlan.ListPerioder.Count; i++)
            {
                var periode = minPlan.ListPerioder[i];

                foreach (var maal in periode.ListMaal)
                {
                    if (maal.ListDelmaal.Any(d => d._id == RedigerDelmaal._id))
                    {
                        valgtPeriodeIndex = i;
                        valgtMaalId = maal._id;
                        break;
                    }
                }

                if (valgtPeriodeIndex != -1 && valgtMaalId != 0)
                    break;
            }


            await HentMaalOgTyper();

            // Brug defensiv tilgang hele vejen
            nytDelmaal = new Delmaal
            {
                _id = RedigerDelmaal?._id ?? 0,
                DelmaalType = RedigerDelmaal?.DelmaalType ?? "",
                Titel = RedigerDelmaal?.Titel ?? "",
                Beskrivelse = RedigerDelmaal?.Beskrivelse ?? "",
                Ansvarlig = RedigerDelmaal?.Ansvarlig ?? "",
                Deadline = RedigerDelmaal?.Deadline,
                DeadlineKommentar = RedigerDelmaal?.DeadlineKommentar ?? "",
                ListOpgaver = RedigerDelmaal?.ListOpgaver != null
                    ? RedigerDelmaal.ListOpgaver.Select(o => new Opgaver
                    {
                        OpgaveNavn = o.OpgaveNavn ?? "",
                        OpgaveDetaljer = o.OpgaveDetaljer ?? "",
                        OpgaveGennemfoert = o.OpgaveGennemfoert
                    }).ToList()
                    : new List<Opgaver>()
            };
            StateHasChanged();
        }
    }
    
    private async Task OnPeriodeChanged(ChangeEventArgs e)
    {
        valgtPeriodeIndex = int.Parse(e.Value?.ToString() ?? "-1");
        await HentMaalOgTyper();
    }

    private async Task HentMaalOgTyper()
    {
        if (minPlan != null && valgtPeriodeIndex >= 0)
        {
            maalTilValgtPeriode = await eService.HentMaalFraPeriode(minPlan._id, valgtPeriodeIndex);
            unikkeDelmaalTyper = await eService.HentDelmaalTyperFraPeriode(minPlan._id, valgtPeriodeIndex);
        }
    }

    private async Task GemDelmaal()
    {
        Console.WriteLine("GemDelmaal() kaldt");

        if (minPlan == null || valgtPeriodeIndex < 0 || valgtMaalId == 0)
        {
            Console.WriteLine("Manglende periode eller m√•l valgt");
            return;
        }

        if (string.IsNullOrWhiteSpace(nytDelmaal.Titel))
        {
            Console.WriteLine("Titel er tom");
            return;
        }

        try
        {
            if (isEditMode)
            {
                Console.WriteLine("üîÅ Redigerer delm√•l");
                await eService.OpdaterDelmaal(minPlan, valgtPeriodeIndex, valgtMaalId, nytDelmaal);
            }
            else
            {
                await eService.TilfoejDelmaal(minPlan, valgtMaalId, nytDelmaal);
                Console.WriteLine("‚úÖ Delm√•l oprettet!");
            }

            if (isEditMode)
            {
                await OnSuccessMessage.InvokeAsync("Delm√•let blev opdateret.");
            }
            else
            {
                await OnSuccessMessage.InvokeAsync("Delm√•let blev oprettet.");
            }

            await OnGemSuccess.InvokeAsync();
            await OnClose.InvokeAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine($" Fejl ved oprettelse: {ex.Message}");
        }
    }
    private void TilfoejOpgave()
    {
        nytDelmaal.ListOpgaver.Add(new Opgaver());
    }

    private void FjernOpgave(Opgaver opg)
    {
        nytDelmaal.ListOpgaver.Remove(opg);
    }


}
