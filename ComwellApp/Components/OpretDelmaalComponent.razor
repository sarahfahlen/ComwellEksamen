@using ComwellApp.Services.Elevplan
@using Shared
@inject IElevplanService eService

<EditForm Model="nytDelmaal" OnValidSubmit="GemDelmaal">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="modal-form">

        <!-- Periode -->
        <div class="form-floating-group">
            <select class="form-control floating-input" @onchange="OnPeriodeChanged">
                <option value="-1" disabled selected hidden>-- Vælg periode --</option>
                @for (int i = 0; i < minPlan?.ListPerioder.Count; i++)
                {
                    <option value="@i">Periode @(i + 1)</option>
                }
            </select>
            <label>Vælg praktikperiode</label>
        </div>

        @if (valgtPeriodeIndex >= 0)
        {
            <div class="form-floating-group">
                <select class="form-control floating-input" @bind="valgtMaalId">
                    <option value="0" disabled selected hidden>-- Vælg mål --</option>
                    @foreach (var maal in maalTilValgtPeriode)
                    {
                        <option value="@maal.MaalId">@maal.MaalNavn</option>
                    }
                </select>
                <label>Vælg mål</label>
            </div>

            <div class="form-floating-group">
                <select class="form-control floating-input" @bind="nytDelmaal.DelmaalType">
                    <option value="" disabled selected hidden>-- Vælg type --</option>
                    @foreach (var type in unikkeDelmaalTyper)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <label>Type</label>
                <ValidationMessage For="@(() => nytDelmaal.DelmaalType)"/>
            </div>

            <div class="form-floating-group">
                <InputText class="form-control floating-input" @bind-Value="nytDelmaal.Titel" placeholder=" "/>
                <label>Titel</label>
                <ValidationMessage For="@(() => nytDelmaal.Titel)"/>
            </div>

            <div class="form-floating-group">
                <InputTextArea class="form-control floating-input" @bind-Value="nytDelmaal.Beskrivelse"
                               placeholder=" "/>
                <label>Beskrivelse</label>
                <ValidationMessage For="@(() => nytDelmaal.Beskrivelse)"/>
            </div>

            <div class="form-floating-group">
                <InputText class="form-control floating-input" @bind-Value="nytDelmaal.Ansvarlig" placeholder=" "/>
                <label>Ansvarlig</label>
                <ValidationMessage For="@(() => nytDelmaal.Ansvarlig)"/>
            </div>

            <div class="form-floating-group">
                <InputDate class="form-control floating-input"
                           @bind-Value="nytDelmaal.Deadline"
                           disabled="@(!string.IsNullOrWhiteSpace(nytDelmaal.DeadlineKommentar))"/>
                <label>Deadline</label>
            </div>

            <div class="form-floating-group">
                <InputText class="form-control floating-input"
                           placeholder=" "
                           @bind-Value="nytDelmaal.DeadlineKommentar"
                           disabled="@(nytDelmaal.Deadline.HasValue)"/>
                <label>Kommentar til deadline</label>
            </div>
            <h5 class="mt-3">Opgaver</h5>
            @foreach (var opgave in nytDelmaal.ListOpgaver)
            {
                <div class="opgave-wrapper">
                    <div class="form-floating-group">
                        <InputText class="form-control floating-input" @bind-Value="opgave.OpgaveNavn" placeholder=" " />
                        <label>Opgave navn</label>
                    </div>

                    <div class="form-floating-group">
                        <InputText class="form-control floating-input" @bind-Value="opgave.OpgaveDetaljer" placeholder=" " />
                        <label>Opgave detaljer</label>
                    </div>

                    <button type="button" class="fjern-opgave" @onclick="() => FjernOpgave(opgave)">Fjern</button>
                </div>
            }
            <button type="button" class="tilføj-opgaver" @onclick="TilfoejOpgave">Tilføj ny opgave</button>

            <div class="gemdelmaal-knap-container">
                <button type="submit" class="Gemdelmaalknap">Opret delmål</button>
            </div>
        }
    </div>
</EditForm>

@code {
    [Parameter] public Elevplan? minPlan { get; set; }
    [Parameter] public EventCallback OnGemSuccess { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private Delmaal nytDelmaal = new();
    private int valgtPeriodeIndex = -1;
    private int valgtMaalId = 0;

    private List<Maal> maalTilValgtPeriode = new();
    private List<string> unikkeDelmaalTyper = new();

    private async Task OnPeriodeChanged(ChangeEventArgs e)
    {
        valgtPeriodeIndex = int.Parse(e.Value?.ToString() ?? "-1");
        await HentMaalOgTyper();
    }

    private async Task HentMaalOgTyper()
    {
        if (minPlan != null && valgtPeriodeIndex >= 0)
        {
            maalTilValgtPeriode = await eService.HentMaalFraPeriode(minPlan.ElevplanId, valgtPeriodeIndex);
            unikkeDelmaalTyper = await eService.HentDelmaalTyperFraPeriode(minPlan.ElevplanId, valgtPeriodeIndex);
        }
    }

    private async Task GemDelmaal()
    {
        Console.WriteLine("GemDelmaal() kaldt");

        if (minPlan == null || valgtPeriodeIndex < 0 || valgtMaalId == 0)
        {
            Console.WriteLine("Manglende periode eller mål valgt");
            return;
        }

        if (string.IsNullOrWhiteSpace(nytDelmaal.Titel))
        {
            Console.WriteLine("Titel er tom");
            return;
        }

        try
        {
            await eService.TilfoejDelmaal(minPlan, valgtMaalId, nytDelmaal);
            Console.WriteLine("✅ Delmål oprettet!");
            await OnGemSuccess.InvokeAsync();
            await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($" Fejl ved oprettelse: {ex.Message}");
        }
    }
    private void TilfoejOpgave()
    {
        nytDelmaal.ListOpgaver.Add(new Opgaver());
    }

    private void FjernOpgave(Opgaver opg)
    {
        nytDelmaal.ListOpgaver.Remove(opg);
    }


}
